// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace suil {
namespace tmsp {
namespace types {
class ProofOpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProofOp> {
} _ProofOp_default_instance_;
class ProofDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proof> {
} _Proof_default_instance_;
class KVPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KVPair> {
} _KVPair_default_instance_;
class KI64PairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KI64Pair> {
} _KI64Pair_default_instance_;
class TimestampDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Timestamp> {
} _Timestamp_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
  public:
  const ::suil::tmsp::types::RequestEcho* echo_;
  const ::suil::tmsp::types::RequestFlush* flush_;
  const ::suil::tmsp::types::RequestInfo* info_;
  const ::suil::tmsp::types::RequestSetOption* set_option_;
  const ::suil::tmsp::types::RequestInitChain* init_chain_;
  const ::suil::tmsp::types::RequestQuery* query_;
  const ::suil::tmsp::types::RequestBeginBlock* begin_block_;
  const ::suil::tmsp::types::RequestCheckTx* check_tx_;
  const ::suil::tmsp::types::RequestDeliverTx* deliver_tx_;
  const ::suil::tmsp::types::RequestEndBlock* end_block_;
  const ::suil::tmsp::types::RequestCommit* commit_;
} _Request_default_instance_;
class RequestEchoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestEcho> {
} _RequestEcho_default_instance_;
class RequestFlushDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestFlush> {
} _RequestFlush_default_instance_;
class RequestInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestInfo> {
} _RequestInfo_default_instance_;
class RequestSetOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestSetOption> {
} _RequestSetOption_default_instance_;
class RequestInitChainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestInitChain> {
} _RequestInitChain_default_instance_;
class RequestQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestQuery> {
} _RequestQuery_default_instance_;
class RequestBeginBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestBeginBlock> {
} _RequestBeginBlock_default_instance_;
class RequestCheckTxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestCheckTx> {
} _RequestCheckTx_default_instance_;
class RequestDeliverTxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestDeliverTx> {
} _RequestDeliverTx_default_instance_;
class RequestEndBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestEndBlock> {
} _RequestEndBlock_default_instance_;
class RequestCommitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestCommit> {
} _RequestCommit_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
  public:
  const ::suil::tmsp::types::ResponseException* exception_;
  const ::suil::tmsp::types::ResponseEcho* echo_;
  const ::suil::tmsp::types::ResponseFlush* flush_;
  const ::suil::tmsp::types::ResponseInfo* info_;
  const ::suil::tmsp::types::ResponseSetOption* set_option_;
  const ::suil::tmsp::types::ResponseInitChain* init_chain_;
  const ::suil::tmsp::types::ResponseQuery* query_;
  const ::suil::tmsp::types::ResponseBeginBlock* begin_block_;
  const ::suil::tmsp::types::ResponseCheckTx* check_tx_;
  const ::suil::tmsp::types::ResponseDeliverTx* deliver_tx_;
  const ::suil::tmsp::types::ResponseEndBlock* end_block_;
  const ::suil::tmsp::types::ResponseCommit* commit_;
} _Response_default_instance_;
class ResponseExceptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseException> {
} _ResponseException_default_instance_;
class ResponseEchoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseEcho> {
} _ResponseEcho_default_instance_;
class ResponseFlushDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseFlush> {
} _ResponseFlush_default_instance_;
class ResponseInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseInfo> {
} _ResponseInfo_default_instance_;
class ResponseSetOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseSetOption> {
} _ResponseSetOption_default_instance_;
class ResponseInitChainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseInitChain> {
} _ResponseInitChain_default_instance_;
class ResponseQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery> {
} _ResponseQuery_default_instance_;
class ResponseBeginBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseBeginBlock> {
} _ResponseBeginBlock_default_instance_;
class ResponseCheckTxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseCheckTx> {
} _ResponseCheckTx_default_instance_;
class ResponseDeliverTxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseDeliverTx> {
} _ResponseDeliverTx_default_instance_;
class ResponseEndBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseEndBlock> {
} _ResponseEndBlock_default_instance_;
class ResponseCommitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseCommit> {
} _ResponseCommit_default_instance_;
class ConsensusParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusParams> {
} _ConsensusParams_default_instance_;
class BlockSizeParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockSizeParams> {
} _BlockSizeParams_default_instance_;
class EvidenceParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EvidenceParams> {
} _EvidenceParams_default_instance_;
class ValidatorParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValidatorParams> {
} _ValidatorParams_default_instance_;
class LastCommitInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LastCommitInfo> {
} _LastCommitInfo_default_instance_;
class HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Header> {
} _Header_default_instance_;
class VersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Version> {
} _Version_default_instance_;
class BlockIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockID> {
} _BlockID_default_instance_;
class PartSetHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartSetHeader> {
} _PartSetHeader_default_instance_;
class ValidatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Validator> {
} _Validator_default_instance_;
class ValidatorUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValidatorUpdate> {
} _ValidatorUpdate_default_instance_;
class VoteInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoteInfo> {
} _VoteInfo_default_instance_;
class PubKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PubKey> {
} _PubKey_default_instance_;
class EvidenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Evidence> {
} _Evidence_default_instance_;

namespace protobuf_types_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[44];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOp, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOp, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProofOp, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, ops_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, nanos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), echo_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), flush_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), set_option_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), init_chain_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), query_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), begin_block_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), check_tx_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), deliver_tx_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), end_block_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Request_default_instance_), commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEcho, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, block_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, p2p_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, consensus_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, validators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, app_state_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, prove_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, last_commit_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, byzantine_validators_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckTx, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDeliverTx, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEndBlock, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), exception_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), echo_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), flush_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), set_option_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), init_chain_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), query_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), begin_block_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), check_tx_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), deliver_tx_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), end_block_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseException, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEcho, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, app_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, last_block_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, last_block_app_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInitChain, consensus_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInitChain, validators_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, proof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, codespace_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBeginBlock, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, gas_wanted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, gas_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, codespace_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, gas_wanted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, gas_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, codespace_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, validator_updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, consensus_param_updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommit, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, block_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, evidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, validator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSizeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSizeParams, max_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSizeParams, max_gas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvidenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvidenceParams, max_age_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatorParams, pub_key_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastCommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastCommitInfo, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastCommitInfo, votes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, num_txs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, total_txs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, last_block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, last_commit_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, data_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, validators_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, next_validators_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, consensus_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, app_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, last_results_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, evidence_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, proposer_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, app_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, parts_header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, power_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatorUpdate, pub_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatorUpdate, power_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, validator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, signed_last_block_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubKey, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubKey, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, validator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, total_voting_power_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ProofOp)},
  { 7, -1, sizeof(Proof)},
  { 12, -1, sizeof(KVPair)},
  { 18, -1, sizeof(KI64Pair)},
  { 24, -1, sizeof(Timestamp)},
  { 30, -1, sizeof(Request)},
  { 46, -1, sizeof(RequestEcho)},
  { 51, -1, sizeof(RequestFlush)},
  { 55, -1, sizeof(RequestInfo)},
  { 62, -1, sizeof(RequestSetOption)},
  { 68, -1, sizeof(RequestInitChain)},
  { 77, -1, sizeof(RequestQuery)},
  { 85, -1, sizeof(RequestBeginBlock)},
  { 93, -1, sizeof(RequestCheckTx)},
  { 98, -1, sizeof(RequestDeliverTx)},
  { 103, -1, sizeof(RequestEndBlock)},
  { 108, -1, sizeof(RequestCommit)},
  { 112, -1, sizeof(Response)},
  { 129, -1, sizeof(ResponseException)},
  { 134, -1, sizeof(ResponseEcho)},
  { 139, -1, sizeof(ResponseFlush)},
  { 143, -1, sizeof(ResponseInfo)},
  { 152, -1, sizeof(ResponseSetOption)},
  { 159, -1, sizeof(ResponseInitChain)},
  { 165, -1, sizeof(ResponseQuery)},
  { 178, -1, sizeof(ResponseBeginBlock)},
  { 183, -1, sizeof(ResponseCheckTx)},
  { 195, -1, sizeof(ResponseDeliverTx)},
  { 207, -1, sizeof(ResponseEndBlock)},
  { 214, -1, sizeof(ResponseCommit)},
  { 219, -1, sizeof(ConsensusParams)},
  { 226, -1, sizeof(BlockSizeParams)},
  { 232, -1, sizeof(EvidenceParams)},
  { 237, -1, sizeof(ValidatorParams)},
  { 242, -1, sizeof(LastCommitInfo)},
  { 248, -1, sizeof(Header)},
  { 268, -1, sizeof(Version)},
  { 274, -1, sizeof(BlockID)},
  { 280, -1, sizeof(PartSetHeader)},
  { 286, -1, sizeof(Validator)},
  { 292, -1, sizeof(ValidatorUpdate)},
  { 298, -1, sizeof(VoteInfo)},
  { 304, -1, sizeof(PubKey)},
  { 310, -1, sizeof(Evidence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProofOp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KVPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KI64Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestEcho_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestFlush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestSetOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestInitChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestBeginBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestCheckTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestDeliverTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestEndBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseException_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseEcho_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseFlush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseSetOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseInitChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseBeginBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseCheckTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseDeliverTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseEndBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockSizeParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EvidenceParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValidatorParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LastCommitInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartSetHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Validator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValidatorUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PubKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Evidence_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "types.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 44);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProofOp_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Proof_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _KVPair_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _KI64Pair_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Timestamp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RequestEcho_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RequestFlush_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RequestInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _RequestSetOption_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _RequestInitChain_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _RequestQuery_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RequestBeginBlock_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RequestCheckTx_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RequestDeliverTx_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _RequestEndBlock_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RequestCommit_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ResponseException_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ResponseEcho_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ResponseFlush_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ResponseInfo_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ResponseSetOption_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ResponseInitChain_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ResponseQuery_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ResponseBeginBlock_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _ResponseCheckTx_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _ResponseDeliverTx_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ResponseEndBlock_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ResponseCommit_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ConsensusParams_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _BlockSizeParams_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _EvidenceParams_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ValidatorParams_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _LastCommitInfo_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _Header_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _Version_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _BlockID_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _PartSetHeader_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _Validator_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _ValidatorUpdate_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _VoteInfo_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _PubKey_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _Evidence_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProofOp_default_instance_.DefaultConstruct();
  _Proof_default_instance_.DefaultConstruct();
  _KVPair_default_instance_.DefaultConstruct();
  _KI64Pair_default_instance_.DefaultConstruct();
  _Timestamp_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _RequestEcho_default_instance_.DefaultConstruct();
  _RequestFlush_default_instance_.DefaultConstruct();
  _RequestInfo_default_instance_.DefaultConstruct();
  _RequestSetOption_default_instance_.DefaultConstruct();
  _RequestInitChain_default_instance_.DefaultConstruct();
  _RequestQuery_default_instance_.DefaultConstruct();
  _RequestBeginBlock_default_instance_.DefaultConstruct();
  _RequestCheckTx_default_instance_.DefaultConstruct();
  _RequestDeliverTx_default_instance_.DefaultConstruct();
  _RequestEndBlock_default_instance_.DefaultConstruct();
  _RequestCommit_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _ResponseException_default_instance_.DefaultConstruct();
  _ResponseEcho_default_instance_.DefaultConstruct();
  _ResponseFlush_default_instance_.DefaultConstruct();
  _ResponseInfo_default_instance_.DefaultConstruct();
  _ResponseSetOption_default_instance_.DefaultConstruct();
  _ResponseInitChain_default_instance_.DefaultConstruct();
  _ResponseQuery_default_instance_.DefaultConstruct();
  _ResponseBeginBlock_default_instance_.DefaultConstruct();
  _ResponseCheckTx_default_instance_.DefaultConstruct();
  _ResponseDeliverTx_default_instance_.DefaultConstruct();
  _ResponseEndBlock_default_instance_.DefaultConstruct();
  _ResponseCommit_default_instance_.DefaultConstruct();
  _ConsensusParams_default_instance_.DefaultConstruct();
  _BlockSizeParams_default_instance_.DefaultConstruct();
  _EvidenceParams_default_instance_.DefaultConstruct();
  _ValidatorParams_default_instance_.DefaultConstruct();
  _LastCommitInfo_default_instance_.DefaultConstruct();
  _Header_default_instance_.DefaultConstruct();
  _Version_default_instance_.DefaultConstruct();
  _BlockID_default_instance_.DefaultConstruct();
  _PartSetHeader_default_instance_.DefaultConstruct();
  _Validator_default_instance_.DefaultConstruct();
  _ValidatorUpdate_default_instance_.DefaultConstruct();
  _VoteInfo_default_instance_.DefaultConstruct();
  _PubKey_default_instance_.DefaultConstruct();
  _Evidence_default_instance_.DefaultConstruct();
  _Request_default_instance_.echo_ = const_cast< ::suil::tmsp::types::RequestEcho*>(
      ::suil::tmsp::types::RequestEcho::internal_default_instance());
  _Request_default_instance_.flush_ = const_cast< ::suil::tmsp::types::RequestFlush*>(
      ::suil::tmsp::types::RequestFlush::internal_default_instance());
  _Request_default_instance_.info_ = const_cast< ::suil::tmsp::types::RequestInfo*>(
      ::suil::tmsp::types::RequestInfo::internal_default_instance());
  _Request_default_instance_.set_option_ = const_cast< ::suil::tmsp::types::RequestSetOption*>(
      ::suil::tmsp::types::RequestSetOption::internal_default_instance());
  _Request_default_instance_.init_chain_ = const_cast< ::suil::tmsp::types::RequestInitChain*>(
      ::suil::tmsp::types::RequestInitChain::internal_default_instance());
  _Request_default_instance_.query_ = const_cast< ::suil::tmsp::types::RequestQuery*>(
      ::suil::tmsp::types::RequestQuery::internal_default_instance());
  _Request_default_instance_.begin_block_ = const_cast< ::suil::tmsp::types::RequestBeginBlock*>(
      ::suil::tmsp::types::RequestBeginBlock::internal_default_instance());
  _Request_default_instance_.check_tx_ = const_cast< ::suil::tmsp::types::RequestCheckTx*>(
      ::suil::tmsp::types::RequestCheckTx::internal_default_instance());
  _Request_default_instance_.deliver_tx_ = const_cast< ::suil::tmsp::types::RequestDeliverTx*>(
      ::suil::tmsp::types::RequestDeliverTx::internal_default_instance());
  _Request_default_instance_.end_block_ = const_cast< ::suil::tmsp::types::RequestEndBlock*>(
      ::suil::tmsp::types::RequestEndBlock::internal_default_instance());
  _Request_default_instance_.commit_ = const_cast< ::suil::tmsp::types::RequestCommit*>(
      ::suil::tmsp::types::RequestCommit::internal_default_instance());
  _RequestInitChain_default_instance_.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
  _RequestInitChain_default_instance_.get_mutable()->consensus_params_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
  _RequestBeginBlock_default_instance_.get_mutable()->header_ = const_cast< ::suil::tmsp::types::Header*>(
      ::suil::tmsp::types::Header::internal_default_instance());
  _RequestBeginBlock_default_instance_.get_mutable()->last_commit_info_ = const_cast< ::suil::tmsp::types::LastCommitInfo*>(
      ::suil::tmsp::types::LastCommitInfo::internal_default_instance());
  _Response_default_instance_.exception_ = const_cast< ::suil::tmsp::types::ResponseException*>(
      ::suil::tmsp::types::ResponseException::internal_default_instance());
  _Response_default_instance_.echo_ = const_cast< ::suil::tmsp::types::ResponseEcho*>(
      ::suil::tmsp::types::ResponseEcho::internal_default_instance());
  _Response_default_instance_.flush_ = const_cast< ::suil::tmsp::types::ResponseFlush*>(
      ::suil::tmsp::types::ResponseFlush::internal_default_instance());
  _Response_default_instance_.info_ = const_cast< ::suil::tmsp::types::ResponseInfo*>(
      ::suil::tmsp::types::ResponseInfo::internal_default_instance());
  _Response_default_instance_.set_option_ = const_cast< ::suil::tmsp::types::ResponseSetOption*>(
      ::suil::tmsp::types::ResponseSetOption::internal_default_instance());
  _Response_default_instance_.init_chain_ = const_cast< ::suil::tmsp::types::ResponseInitChain*>(
      ::suil::tmsp::types::ResponseInitChain::internal_default_instance());
  _Response_default_instance_.query_ = const_cast< ::suil::tmsp::types::ResponseQuery*>(
      ::suil::tmsp::types::ResponseQuery::internal_default_instance());
  _Response_default_instance_.begin_block_ = const_cast< ::suil::tmsp::types::ResponseBeginBlock*>(
      ::suil::tmsp::types::ResponseBeginBlock::internal_default_instance());
  _Response_default_instance_.check_tx_ = const_cast< ::suil::tmsp::types::ResponseCheckTx*>(
      ::suil::tmsp::types::ResponseCheckTx::internal_default_instance());
  _Response_default_instance_.deliver_tx_ = const_cast< ::suil::tmsp::types::ResponseDeliverTx*>(
      ::suil::tmsp::types::ResponseDeliverTx::internal_default_instance());
  _Response_default_instance_.end_block_ = const_cast< ::suil::tmsp::types::ResponseEndBlock*>(
      ::suil::tmsp::types::ResponseEndBlock::internal_default_instance());
  _Response_default_instance_.commit_ = const_cast< ::suil::tmsp::types::ResponseCommit*>(
      ::suil::tmsp::types::ResponseCommit::internal_default_instance());
  _ResponseInitChain_default_instance_.get_mutable()->consensus_params_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
  _ResponseQuery_default_instance_.get_mutable()->proof_ = const_cast< ::suil::tmsp::types::Proof*>(
      ::suil::tmsp::types::Proof::internal_default_instance());
  _ResponseEndBlock_default_instance_.get_mutable()->consensus_param_updates_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
  _ConsensusParams_default_instance_.get_mutable()->block_size_ = const_cast< ::suil::tmsp::types::BlockSizeParams*>(
      ::suil::tmsp::types::BlockSizeParams::internal_default_instance());
  _ConsensusParams_default_instance_.get_mutable()->evidence_ = const_cast< ::suil::tmsp::types::EvidenceParams*>(
      ::suil::tmsp::types::EvidenceParams::internal_default_instance());
  _ConsensusParams_default_instance_.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::ValidatorParams*>(
      ::suil::tmsp::types::ValidatorParams::internal_default_instance());
  _Header_default_instance_.get_mutable()->version_ = const_cast< ::suil::tmsp::types::Version*>(
      ::suil::tmsp::types::Version::internal_default_instance());
  _Header_default_instance_.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
  _Header_default_instance_.get_mutable()->last_block_id_ = const_cast< ::suil::tmsp::types::BlockID*>(
      ::suil::tmsp::types::BlockID::internal_default_instance());
  _BlockID_default_instance_.get_mutable()->parts_header_ = const_cast< ::suil::tmsp::types::PartSetHeader*>(
      ::suil::tmsp::types::PartSetHeader::internal_default_instance());
  _ValidatorUpdate_default_instance_.get_mutable()->pub_key_ = const_cast< ::suil::tmsp::types::PubKey*>(
      ::suil::tmsp::types::PubKey::internal_default_instance());
  _VoteInfo_default_instance_.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::Validator*>(
      ::suil::tmsp::types::Validator::internal_default_instance());
  _Evidence_default_instance_.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::Validator*>(
      ::suil::tmsp::types::Validator::internal_default_instance());
  _Evidence_default_instance_.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013types.proto\022\017suil.tmsp.types\"2\n\007ProofO"
      "p\022\014\n\004type\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\022\014\n\004data\030\003 \001"
      "(\014\".\n\005Proof\022%\n\003ops\030\001 \003(\0132\030.suil.tmsp.typ"
      "es.ProofOp\"$\n\006KVPair\022\013\n\003key\030\001 \001(\014\022\r\n\005val"
      "ue\030\002 \001(\014\"&\n\010KI64Pair\022\013\n\003key\030\001 \001(\014\022\r\n\005val"
      "ue\030\002 \001(\003\"+\n\tTimestamp\022\017\n\007seconds\030\001 \001(\003\022\r"
      "\n\005nanos\030\002 \001(\005\"\322\004\n\007Request\022,\n\004echo\030\002 \001(\0132"
      "\034.suil.tmsp.types.RequestEchoH\000\022.\n\005flush"
      "\030\003 \001(\0132\035.suil.tmsp.types.RequestFlushH\000\022"
      ",\n\004info\030\004 \001(\0132\034.suil.tmsp.types.RequestI"
      "nfoH\000\0227\n\nset_option\030\005 \001(\0132!.suil.tmsp.ty"
      "pes.RequestSetOptionH\000\0227\n\ninit_chain\030\006 \001"
      "(\0132!.suil.tmsp.types.RequestInitChainH\000\022"
      ".\n\005query\030\007 \001(\0132\035.suil.tmsp.types.Request"
      "QueryH\000\0229\n\013begin_block\030\010 \001(\0132\".suil.tmsp"
      ".types.RequestBeginBlockH\000\0223\n\010check_tx\030\t"
      " \001(\0132\037.suil.tmsp.types.RequestCheckTxH\000\022"
      "7\n\ndeliver_tx\030\023 \001(\0132!.suil.tmsp.types.Re"
      "questDeliverTxH\000\0225\n\tend_block\030\013 \001(\0132 .su"
      "il.tmsp.types.RequestEndBlockH\000\0220\n\006commi"
      "t\030\014 \001(\0132\036.suil.tmsp.types.RequestCommitH"
      "\000B\007\n\005value\"\036\n\013RequestEcho\022\017\n\007message\030\001 \001"
      "(\t\"\016\n\014RequestFlush\"J\n\013RequestInfo\022\017\n\007ver"
      "sion\030\001 \001(\t\022\025\n\rblock_version\030\002 \001(\004\022\023\n\013p2p"
      "_version\030\003 \001(\004\".\n\020RequestSetOption\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\331\001\n\020RequestInitCh"
      "ain\022(\n\004time\030\001 \001(\0132\032.suil.tmsp.types.Time"
      "stamp\022\020\n\010chain_id\030\002 \001(\t\022:\n\020consensus_par"
      "ams\030\003 \001(\0132 .suil.tmsp.types.ConsensusPar"
      "ams\0224\n\nvalidators\030\004 \003(\0132 .suil.tmsp.type"
      "s.ValidatorUpdate\022\027\n\017app_state_bytes\030\005 \001"
      "(\014\"I\n\014RequestQuery\022\014\n\004data\030\001 \001(\014\022\014\n\004path"
      "\030\002 \001(\t\022\016\n\006height\030\003 \001(\003\022\r\n\005prove\030\004 \001(\010\"\276\001"
      "\n\021RequestBeginBlock\022\014\n\004hash\030\001 \001(\014\022\'\n\006hea"
      "der\030\002 \001(\0132\027.suil.tmsp.types.Header\0229\n\020la"
      "st_commit_info\030\003 \001(\0132\037.suil.tmsp.types.L"
      "astCommitInfo\0227\n\024byzantine_validators\030\004 "
      "\003(\0132\031.suil.tmsp.types.Evidence\"\034\n\016Reques"
      "tCheckTx\022\n\n\002tx\030\001 \001(\014\"\036\n\020RequestDeliverTx"
      "\022\n\n\002tx\030\001 \001(\014\"!\n\017RequestEndBlock\022\016\n\006heigh"
      "t\030\001 \001(\003\"\017\n\rRequestCommit\"\227\005\n\010Response\0227\n"
      "\texception\030\001 \001(\0132\".suil.tmsp.types.Respo"
      "nseExceptionH\000\022-\n\004echo\030\002 \001(\0132\035.suil.tmsp"
      ".types.ResponseEchoH\000\022/\n\005flush\030\003 \001(\0132\036.s"
      "uil.tmsp.types.ResponseFlushH\000\022-\n\004info\030\004"
      " \001(\0132\035.suil.tmsp.types.ResponseInfoH\000\0228\n"
      "\nset_option\030\005 \001(\0132\".suil.tmsp.types.Resp"
      "onseSetOptionH\000\0228\n\ninit_chain\030\006 \001(\0132\".su"
      "il.tmsp.types.ResponseInitChainH\000\022/\n\005que"
      "ry\030\007 \001(\0132\036.suil.tmsp.types.ResponseQuery"
      "H\000\022:\n\013begin_block\030\010 \001(\0132#.suil.tmsp.type"
      "s.ResponseBeginBlockH\000\0224\n\010check_tx\030\t \001(\013"
      "2 .suil.tmsp.types.ResponseCheckTxH\000\0228\n\n"
      "deliver_tx\030\n \001(\0132\".suil.tmsp.types.Respo"
      "nseDeliverTxH\000\0226\n\tend_block\030\013 \001(\0132!.suil"
      ".tmsp.types.ResponseEndBlockH\000\0221\n\006commit"
      "\030\014 \001(\0132\037.suil.tmsp.types.ResponseCommitH"
      "\000B\007\n\005value\"\"\n\021ResponseException\022\r\n\005error"
      "\030\001 \001(\t\"\037\n\014ResponseEcho\022\017\n\007message\030\001 \001(\t\""
      "\017\n\rResponseFlush\"z\n\014ResponseInfo\022\014\n\004data"
      "\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\023\n\013app_version\030\003"
      " \001(\004\022\031\n\021last_block_height\030\004 \001(\003\022\033\n\023last_"
      "block_app_hash\030\005 \001(\014\"<\n\021ResponseSetOptio"
      "n\022\014\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001"
      "(\t\"\205\001\n\021ResponseInitChain\022:\n\020consensus_pa"
      "rams\030\001 \001(\0132 .suil.tmsp.types.ConsensusPa"
      "rams\0224\n\nvalidators\030\002 \003(\0132 .suil.tmsp.typ"
      "es.ValidatorUpdate\"\255\001\n\rResponseQuery\022\014\n\004"
      "code\030\001 \001(\r\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\r\n"
      "\005index\030\005 \001(\003\022\013\n\003key\030\006 \001(\014\022\r\n\005value\030\007 \001(\014"
      "\022%\n\005proof\030\010 \001(\0132\026.suil.tmsp.types.Proof\022"
      "\016\n\006height\030\t \001(\003\022\021\n\tcodespace\030\n \001(\t\";\n\022Re"
      "sponseBeginBlock\022%\n\004tags\030\001 \003(\0132\027.suil.tm"
      "sp.types.KVPair\"\250\001\n\017ResponseCheckTx\022\014\n\004c"
      "ode\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004"
      "info\030\004 \001(\t\022\022\n\ngas_wanted\030\005 \001(\003\022\020\n\010gas_us"
      "ed\030\006 \001(\003\022%\n\004tags\030\007 \003(\0132\027.suil.tmsp.types"
      ".KVPair\022\021\n\tcodespace\030\010 \001(\t\"\252\001\n\021ResponseD"
      "eliverTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\013\n\003"
      "log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\022\n\ngas_wanted\030\005 "
      "\001(\003\022\020\n\010gas_used\030\006 \001(\003\022%\n\004tags\030\007 \003(\0132\027.su"
      "il.tmsp.types.KVPair\022\021\n\tcodespace\030\010 \001(\t\""
      "\271\001\n\020ResponseEndBlock\022;\n\021validator_update"
      "s\030\001 \003(\0132 .suil.tmsp.types.ValidatorUpdat"
      "e\022A\n\027consensus_param_updates\030\002 \001(\0132 .sui"
      "l.tmsp.types.ConsensusParams\022%\n\004tags\030\003 \003"
      "(\0132\027.suil.tmsp.types.KVPair\"\036\n\016ResponseC"
      "ommit\022\014\n\004data\030\002 \001(\014\"\257\001\n\017ConsensusParams\022"
      "4\n\nblock_size\030\001 \001(\0132 .suil.tmsp.types.Bl"
      "ockSizeParams\0221\n\010evidence\030\002 \001(\0132\037.suil.t"
      "msp.types.EvidenceParams\0223\n\tvalidator\030\003 "
      "\001(\0132 .suil.tmsp.types.ValidatorParams\"5\n"
      "\017BlockSizeParams\022\021\n\tmax_bytes\030\001 \001(\003\022\017\n\007m"
      "ax_gas\030\002 \001(\003\"!\n\016EvidenceParams\022\017\n\007max_ag"
      "e\030\001 \001(\003\"(\n\017ValidatorParams\022\025\n\rpub_key_ty"
      "pes\030\001 \003(\t\"I\n\016LastCommitInfo\022\r\n\005round\030\001 \001"
      "(\005\022(\n\005votes\030\002 \003(\0132\031.suil.tmsp.types.Vote"
      "Info\"\256\003\n\006Header\022)\n\007version\030\001 \001(\0132\030.suil."
      "tmsp.types.Version\022\020\n\010chain_id\030\002 \001(\t\022\016\n\006"
      "height\030\003 \001(\003\022(\n\004time\030\004 \001(\0132\032.suil.tmsp.t"
      "ypes.Timestamp\022\017\n\007num_txs\030\005 \001(\003\022\021\n\ttotal"
      "_txs\030\006 \001(\003\022/\n\rlast_block_id\030\007 \001(\0132\030.suil"
      ".tmsp.types.BlockID\022\030\n\020last_commit_hash\030"
      "\010 \001(\014\022\021\n\tdata_hash\030\t \001(\014\022\027\n\017validators_h"
      "ash\030\n \001(\014\022\034\n\024next_validators_hash\030\013 \001(\014\022"
      "\026\n\016consensus_hash\030\014 \001(\014\022\020\n\010app_hash\030\r \001("
      "\014\022\031\n\021last_results_hash\030\016 \001(\014\022\025\n\revidence"
      "_hash\030\017 \001(\014\022\030\n\020proposer_address\030\020 \001(\014\"%\n"
      "\007Version\022\r\n\005Block\030\001 \001(\004\022\013\n\003App\030\002 \001(\004\"M\n\007"
      "BlockID\022\014\n\004hash\030\001 \001(\014\0224\n\014parts_header\030\002 "
      "\001(\0132\036.suil.tmsp.types.PartSetHeader\",\n\rP"
      "artSetHeader\022\r\n\005total\030\001 \001(\005\022\014\n\004hash\030\002 \001("
      "\014\"+\n\tValidator\022\017\n\007address\030\001 \001(\014\022\r\n\005power"
      "\030\003 \001(\003\"J\n\017ValidatorUpdate\022(\n\007pub_key\030\001 \001"
      "(\0132\027.suil.tmsp.types.PubKey\022\r\n\005power\030\002 \001"
      "(\003\"T\n\010VoteInfo\022-\n\tvalidator\030\001 \001(\0132\032.suil"
      ".tmsp.types.Validator\022\031\n\021signed_last_blo"
      "ck\030\002 \001(\010\"$\n\006PubKey\022\014\n\004type\030\001 \001(\t\022\014\n\004data"
      "\030\002 \001(\014\"\235\001\n\010Evidence\022\014\n\004type\030\001 \001(\t\022-\n\tval"
      "idator\030\002 \001(\0132\032.suil.tmsp.types.Validator"
      "\022\016\n\006height\030\003 \001(\003\022(\n\004time\030\004 \001(\0132\032.suil.tm"
      "sp.types.Timestamp\022\032\n\022total_voting_power"
      "\030\005 \001(\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4894);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_types_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProofOp::kTypeFieldNumber;
const int ProofOp::kKeyFieldNumber;
const int ProofOp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProofOp::ProofOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ProofOp)
}
ProofOp::ProofOp(const ProofOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ProofOp)
}

void ProofOp::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProofOp::~ProofOp() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ProofOp)
  SharedDtor();
}

void ProofOp::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProofOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProofOp::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[0].descriptor;
}

const ProofOp& ProofOp::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProofOp* ProofOp::New(::google::protobuf::Arena* arena) const {
  ProofOp* n = new ProofOp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProofOp::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ProofOp)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProofOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ProofOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ProofOp.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ProofOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ProofOp)
  return false;
#undef DO_
}

void ProofOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ProofOp)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ProofOp.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ProofOp)
}

::google::protobuf::uint8* ProofOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ProofOp)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ProofOp.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ProofOp)
  return target;
}

size_t ProofOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ProofOp)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProofOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ProofOp)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProofOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ProofOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ProofOp)
    MergeFrom(*source);
  }
}

void ProofOp::MergeFrom(const ProofOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ProofOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ProofOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ProofOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofOp::CopyFrom(const ProofOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ProofOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOp::IsInitialized() const {
  return true;
}

void ProofOp::Swap(ProofOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProofOp::InternalSwap(ProofOp* other) {
  type_.Swap(&other->type_);
  key_.Swap(&other->key_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProofOp::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProofOp

// string type = 1;
void ProofOp::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProofOp::type() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ProofOp.type)
  return type_.GetNoArena();
}
void ProofOp::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ProofOp.type)
}
#if LANG_CXX11
void ProofOp::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ProofOp.type)
}
#endif
void ProofOp::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ProofOp.type)
}
void ProofOp::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ProofOp.type)
}
::std::string* ProofOp::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ProofOp.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProofOp::release_type() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ProofOp.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProofOp::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ProofOp.type)
}

// bytes key = 2;
void ProofOp::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProofOp::key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ProofOp.key)
  return key_.GetNoArena();
}
void ProofOp::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ProofOp.key)
}
#if LANG_CXX11
void ProofOp::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ProofOp.key)
}
#endif
void ProofOp::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ProofOp.key)
}
void ProofOp::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ProofOp.key)
}
::std::string* ProofOp::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ProofOp.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProofOp::release_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ProofOp.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProofOp::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ProofOp.key)
}

// bytes data = 3;
void ProofOp::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProofOp::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ProofOp.data)
  return data_.GetNoArena();
}
void ProofOp::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ProofOp.data)
}
#if LANG_CXX11
void ProofOp::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ProofOp.data)
}
#endif
void ProofOp::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ProofOp.data)
}
void ProofOp::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ProofOp.data)
}
::std::string* ProofOp::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ProofOp.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProofOp::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ProofOp.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProofOp::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ProofOp.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proof::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proof::Proof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Proof)
}
Proof::Proof(const Proof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ops_(from.ops_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Proof)
}

void Proof::SharedCtor() {
  _cached_size_ = 0;
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Proof)
  SharedDtor();
}

void Proof::SharedDtor() {
}

void Proof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proof::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[1].descriptor;
}

const Proof& Proof::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proof* Proof::New(::google::protobuf::Arena* arena) const {
  Proof* n = new Proof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Proof)
  ops_.Clear();
}

bool Proof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Proof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.ProofOp ops = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Proof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Proof)
  return false;
#undef DO_
}

void Proof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Proof)
  // repeated .suil.tmsp.types.ProofOp ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ops(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Proof)
}

::google::protobuf::uint8* Proof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Proof)
  // repeated .suil.tmsp.types.ProofOp ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ops(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Proof)
  return target;
}

size_t Proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Proof)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.ProofOp ops = 1;
  {
    unsigned int count = this->ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ops(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  const Proof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Proof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Proof)
    MergeFrom(*source);
  }
}

void Proof::MergeFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ops_.MergeFrom(from.ops_);
}

void Proof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {
  return true;
}

void Proof::Swap(Proof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proof::InternalSwap(Proof* other) {
  ops_.UnsafeArenaSwap(&other->ops_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proof::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proof

// repeated .suil.tmsp.types.ProofOp ops = 1;
int Proof::ops_size() const {
  return ops_.size();
}
void Proof::clear_ops() {
  ops_.Clear();
}
const ::suil::tmsp::types::ProofOp& Proof::ops(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Proof.ops)
  return ops_.Get(index);
}
::suil::tmsp::types::ProofOp* Proof::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Proof.ops)
  return ops_.Mutable(index);
}
::suil::tmsp::types::ProofOp* Proof::add_ops() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.Proof.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ProofOp >*
Proof::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.Proof.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ProofOp >&
Proof::ops() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.Proof.ops)
  return ops_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVPair::kKeyFieldNumber;
const int KVPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVPair::KVPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.KVPair)
}
KVPair::KVPair(const KVPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.KVPair)
}

void KVPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KVPair::~KVPair() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.KVPair)
  SharedDtor();
}

void KVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KVPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVPair::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[2].descriptor;
}

const KVPair& KVPair::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

KVPair* KVPair::New(::google::protobuf::Arena* arena) const {
  KVPair* n = new KVPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.KVPair)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.KVPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.KVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.KVPair)
  return false;
#undef DO_
}

void KVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.KVPair)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.KVPair)
}

::google::protobuf::uint8* KVPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.KVPair)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.KVPair)
  return target;
}

size_t KVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.KVPair)
  size_t total_size = 0;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.KVPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KVPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KVPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.KVPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.KVPair)
    MergeFrom(*source);
  }
}

void KVPair::MergeFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.KVPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KVPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVPair::CopyFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPair::IsInitialized() const {
  return true;
}

void KVPair::Swap(KVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVPair::InternalSwap(KVPair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVPair::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVPair

// bytes key = 1;
void KVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KVPair::key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.KVPair.key)
  return key_.GetNoArena();
}
void KVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.KVPair.key)
}
#if LANG_CXX11
void KVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.KVPair.key)
}
#endif
void KVPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.KVPair.key)
}
void KVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.KVPair.key)
}
::std::string* KVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.KVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KVPair::release_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.KVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.KVPair.key)
}

// bytes value = 2;
void KVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KVPair::value() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.KVPair.value)
  return value_.GetNoArena();
}
void KVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.KVPair.value)
}
#if LANG_CXX11
void KVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.KVPair.value)
}
#endif
void KVPair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.KVPair.value)
}
void KVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.KVPair.value)
}
::std::string* KVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.KVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KVPair::release_value() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.KVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.KVPair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KI64Pair::kKeyFieldNumber;
const int KI64Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KI64Pair::KI64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.KI64Pair)
}
KI64Pair::KI64Pair(const KI64Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.KI64Pair)
}

void KI64Pair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

KI64Pair::~KI64Pair() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.KI64Pair)
  SharedDtor();
}

void KI64Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KI64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KI64Pair::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[3].descriptor;
}

const KI64Pair& KI64Pair::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

KI64Pair* KI64Pair::New(::google::protobuf::Arena* arena) const {
  KI64Pair* n = new KI64Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KI64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.KI64Pair)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
}

bool KI64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.KI64Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.KI64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.KI64Pair)
  return false;
#undef DO_
}

void KI64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.KI64Pair)
  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.KI64Pair)
}

::google::protobuf::uint8* KI64Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.KI64Pair)
  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.KI64Pair)
  return target;
}

size_t KI64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.KI64Pair)
  size_t total_size = 0;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KI64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.KI64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const KI64Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KI64Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.KI64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.KI64Pair)
    MergeFrom(*source);
  }
}

void KI64Pair::MergeFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.KI64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void KI64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KI64Pair::CopyFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KI64Pair::IsInitialized() const {
  return true;
}

void KI64Pair::Swap(KI64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KI64Pair::InternalSwap(KI64Pair* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KI64Pair::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KI64Pair

// bytes key = 1;
void KI64Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KI64Pair::key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.KI64Pair.key)
  return key_.GetNoArena();
}
void KI64Pair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.KI64Pair.key)
}
#if LANG_CXX11
void KI64Pair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.KI64Pair.key)
}
#endif
void KI64Pair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.KI64Pair.key)
}
void KI64Pair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.KI64Pair.key)
}
::std::string* KI64Pair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.KI64Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KI64Pair::release_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.KI64Pair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KI64Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.KI64Pair.key)
}

// int64 value = 2;
void KI64Pair::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 KI64Pair::value() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.KI64Pair.value)
  return value_;
}
void KI64Pair::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.KI64Pair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecondsFieldNumber;
const int Timestamp::kNanosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&seconds_, 0, reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_) + sizeof(nanos_));
  _cached_size_ = 0;
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[4].descriptor;
}

const Timestamp& Timestamp::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Timestamp)
  ::memset(&seconds_, 0, reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_) + sizeof(nanos_));
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 seconds = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nanos = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Timestamp)
  // int64 seconds = 1;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nanos(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Timestamp)
  // int64 seconds = 1;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nanos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Timestamp)
  size_t total_size = 0;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seconds());
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nanos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.nanos() != 0) {
    set_nanos(from.nanos());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  std::swap(seconds_, other->seconds_);
  std::swap(nanos_, other->nanos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// int64 seconds = 1;
void Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Timestamp.seconds)
  return seconds_;
}
void Timestamp::set_seconds(::google::protobuf::int64 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Timestamp.seconds)
}

// int32 nanos = 2;
void Timestamp::clear_nanos() {
  nanos_ = 0;
}
::google::protobuf::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Timestamp.nanos)
  return nanos_;
}
void Timestamp::set_nanos(::google::protobuf::int32 value) {
  
  nanos_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Timestamp.nanos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kEchoFieldNumber;
const int Request::kFlushFieldNumber;
const int Request::kInfoFieldNumber;
const int Request::kSetOptionFieldNumber;
const int Request::kInitChainFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kBeginBlockFieldNumber;
const int Request::kCheckTxFieldNumber;
const int Request::kDeliverTxFieldNumber;
const int Request::kEndBlockFieldNumber;
const int Request::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Request)
}

void Request::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[5].descriptor;
}

const Request& Request::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:suil.tmsp.types.Request)
  switch (value_case()) {
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Request)
  clear_value();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.RequestEcho echo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestFlush flush = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestInfo info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestSetOption set_option = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestInitChain init_chain = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestQuery query = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestCheckTx check_tx = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestEndBlock end_block = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestCommit commit = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Request)
  // .suil.tmsp.types.RequestEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // .suil.tmsp.types.RequestFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // .suil.tmsp.types.RequestInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // .suil.tmsp.types.RequestSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // .suil.tmsp.types.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // .suil.tmsp.types.RequestQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // .suil.tmsp.types.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // .suil.tmsp.types.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // .suil.tmsp.types.RequestCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *value_.deliver_tx_, output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Request)
  // .suil.tmsp.types.RequestEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.echo_, false, target);
  }

  // .suil.tmsp.types.RequestFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.flush_, false, target);
  }

  // .suil.tmsp.types.RequestInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *value_.info_, false, target);
  }

  // .suil.tmsp.types.RequestSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *value_.set_option_, false, target);
  }

  // .suil.tmsp.types.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *value_.init_chain_, false, target);
  }

  // .suil.tmsp.types.RequestQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *value_.query_, false, target);
  }

  // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *value_.begin_block_, false, target);
  }

  // .suil.tmsp.types.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *value_.check_tx_, false, target);
  }

  // .suil.tmsp.types.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.end_block_, false, target);
  }

  // .suil.tmsp.types.RequestCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *value_.commit_, false, target);
  }

  // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *value_.deliver_tx_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Request)
  size_t total_size = 0;

  switch (value_case()) {
    // .suil.tmsp.types.RequestEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.echo_);
      break;
    }
    // .suil.tmsp.types.RequestFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.flush_);
      break;
    }
    // .suil.tmsp.types.RequestInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.info_);
      break;
    }
    // .suil.tmsp.types.RequestSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.set_option_);
      break;
    }
    // .suil.tmsp.types.RequestInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.init_chain_);
      break;
    }
    // .suil.tmsp.types.RequestQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.query_);
      break;
    }
    // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.begin_block_);
      break;
    }
    // .suil.tmsp.types.RequestCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.check_tx_);
      break;
    }
    // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
    case kDeliverTx: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.deliver_tx_);
      break;
    }
    // .suil.tmsp.types.RequestEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_block_);
      break;
    }
    // .suil.tmsp.types.RequestCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// .suil.tmsp.types.RequestEcho echo = 2;
bool Request::has_echo() const {
  return value_case() == kEcho;
}
void Request::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
void Request::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestEcho& Request::echo() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.echo)
  return has_echo()
      ? *value_.echo_
      : ::suil::tmsp::types::RequestEcho::default_instance();
}
::suil::tmsp::types::RequestEcho* Request::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::suil::tmsp::types::RequestEcho;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.echo)
  return value_.echo_;
}
::suil::tmsp::types::RequestEcho* Request::release_echo() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.echo)
  if (has_echo()) {
    clear_has_value();
    ::suil::tmsp::types::RequestEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_echo(::suil::tmsp::types::RequestEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.echo)
}

// .suil.tmsp.types.RequestFlush flush = 3;
bool Request::has_flush() const {
  return value_case() == kFlush;
}
void Request::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
void Request::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestFlush& Request::flush() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.flush)
  return has_flush()
      ? *value_.flush_
      : ::suil::tmsp::types::RequestFlush::default_instance();
}
::suil::tmsp::types::RequestFlush* Request::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::suil::tmsp::types::RequestFlush;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.flush)
  return value_.flush_;
}
::suil::tmsp::types::RequestFlush* Request::release_flush() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.flush)
  if (has_flush()) {
    clear_has_value();
    ::suil::tmsp::types::RequestFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_flush(::suil::tmsp::types::RequestFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.flush)
}

// .suil.tmsp.types.RequestInfo info = 4;
bool Request::has_info() const {
  return value_case() == kInfo;
}
void Request::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Request::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestInfo& Request::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.info)
  return has_info()
      ? *value_.info_
      : ::suil::tmsp::types::RequestInfo::default_instance();
}
::suil::tmsp::types::RequestInfo* Request::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::suil::tmsp::types::RequestInfo;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.info)
  return value_.info_;
}
::suil::tmsp::types::RequestInfo* Request::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.info)
  if (has_info()) {
    clear_has_value();
    ::suil::tmsp::types::RequestInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_info(::suil::tmsp::types::RequestInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.info)
}

// .suil.tmsp.types.RequestSetOption set_option = 5;
bool Request::has_set_option() const {
  return value_case() == kSetOption;
}
void Request::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
void Request::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestSetOption& Request::set_option() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::suil::tmsp::types::RequestSetOption::default_instance();
}
::suil::tmsp::types::RequestSetOption* Request::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::suil::tmsp::types::RequestSetOption;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.set_option)
  return value_.set_option_;
}
::suil::tmsp::types::RequestSetOption* Request::release_set_option() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::suil::tmsp::types::RequestSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_set_option(::suil::tmsp::types::RequestSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.set_option)
}

// .suil.tmsp.types.RequestInitChain init_chain = 6;
bool Request::has_init_chain() const {
  return value_case() == kInitChain;
}
void Request::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
void Request::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestInitChain& Request::init_chain() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::suil::tmsp::types::RequestInitChain::default_instance();
}
::suil::tmsp::types::RequestInitChain* Request::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::suil::tmsp::types::RequestInitChain;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.init_chain)
  return value_.init_chain_;
}
::suil::tmsp::types::RequestInitChain* Request::release_init_chain() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::suil::tmsp::types::RequestInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_init_chain(::suil::tmsp::types::RequestInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.init_chain)
}

// .suil.tmsp.types.RequestQuery query = 7;
bool Request::has_query() const {
  return value_case() == kQuery;
}
void Request::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Request::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestQuery& Request::query() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.query)
  return has_query()
      ? *value_.query_
      : ::suil::tmsp::types::RequestQuery::default_instance();
}
::suil::tmsp::types::RequestQuery* Request::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::suil::tmsp::types::RequestQuery;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.query)
  return value_.query_;
}
::suil::tmsp::types::RequestQuery* Request::release_query() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.query)
  if (has_query()) {
    clear_has_value();
    ::suil::tmsp::types::RequestQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_query(::suil::tmsp::types::RequestQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.query)
}

// .suil.tmsp.types.RequestBeginBlock begin_block = 8;
bool Request::has_begin_block() const {
  return value_case() == kBeginBlock;
}
void Request::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
void Request::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestBeginBlock& Request::begin_block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::suil::tmsp::types::RequestBeginBlock::default_instance();
}
::suil::tmsp::types::RequestBeginBlock* Request::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::suil::tmsp::types::RequestBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.begin_block)
  return value_.begin_block_;
}
::suil::tmsp::types::RequestBeginBlock* Request::release_begin_block() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::suil::tmsp::types::RequestBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_begin_block(::suil::tmsp::types::RequestBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.begin_block)
}

// .suil.tmsp.types.RequestCheckTx check_tx = 9;
bool Request::has_check_tx() const {
  return value_case() == kCheckTx;
}
void Request::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
void Request::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestCheckTx& Request::check_tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::suil::tmsp::types::RequestCheckTx::default_instance();
}
::suil::tmsp::types::RequestCheckTx* Request::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::suil::tmsp::types::RequestCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.check_tx)
  return value_.check_tx_;
}
::suil::tmsp::types::RequestCheckTx* Request::release_check_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::suil::tmsp::types::RequestCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_check_tx(::suil::tmsp::types::RequestCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.check_tx)
}

// .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
bool Request::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
void Request::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
void Request::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestDeliverTx& Request::deliver_tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::suil::tmsp::types::RequestDeliverTx::default_instance();
}
::suil::tmsp::types::RequestDeliverTx* Request::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::suil::tmsp::types::RequestDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.deliver_tx)
  return value_.deliver_tx_;
}
::suil::tmsp::types::RequestDeliverTx* Request::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::suil::tmsp::types::RequestDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_deliver_tx(::suil::tmsp::types::RequestDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.deliver_tx)
}

// .suil.tmsp.types.RequestEndBlock end_block = 11;
bool Request::has_end_block() const {
  return value_case() == kEndBlock;
}
void Request::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
void Request::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestEndBlock& Request::end_block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::suil::tmsp::types::RequestEndBlock::default_instance();
}
::suil::tmsp::types::RequestEndBlock* Request::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::suil::tmsp::types::RequestEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.end_block)
  return value_.end_block_;
}
::suil::tmsp::types::RequestEndBlock* Request::release_end_block() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::suil::tmsp::types::RequestEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_end_block(::suil::tmsp::types::RequestEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.end_block)
}

// .suil.tmsp.types.RequestCommit commit = 12;
bool Request::has_commit() const {
  return value_case() == kCommit;
}
void Request::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
void Request::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::RequestCommit& Request::commit() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Request.commit)
  return has_commit()
      ? *value_.commit_
      : ::suil::tmsp::types::RequestCommit::default_instance();
}
::suil::tmsp::types::RequestCommit* Request::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::suil::tmsp::types::RequestCommit;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Request.commit)
  return value_.commit_;
}
::suil::tmsp::types::RequestCommit* Request::release_commit() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Request.commit)
  if (has_commit()) {
    clear_has_value();
    ::suil::tmsp::types::RequestCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_commit(::suil::tmsp::types::RequestCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.commit)
}

bool Request::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Request::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Request::ValueCase Request::value_case() const {
  return Request::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEcho::RequestEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestEcho)
}
RequestEcho::RequestEcho(const RequestEcho& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestEcho)
}

void RequestEcho::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestEcho)
  SharedDtor();
}

void RequestEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEcho::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[6].descriptor;
}

const RequestEcho& RequestEcho::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestEcho* RequestEcho::New(::google::protobuf::Arena* arena) const {
  RequestEcho* n = new RequestEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestEcho)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestEcho)
  return false;
#undef DO_
}

void RequestEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestEcho)
  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestEcho)
}

::google::protobuf::uint8* RequestEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestEcho)
  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestEcho)
  return target;
}

size_t RequestEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestEcho)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestEcho* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestEcho)
    MergeFrom(*source);
  }
}

void RequestEcho::MergeFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RequestEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {
  return true;
}

void RequestEcho::Swap(RequestEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEcho::InternalSwap(RequestEcho* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEcho::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEcho

// string message = 1;
void RequestEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestEcho::message() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestEcho.message)
  return message_.GetNoArena();
}
void RequestEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestEcho.message)
}
#if LANG_CXX11
void RequestEcho::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestEcho.message)
}
#endif
void RequestEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestEcho.message)
}
void RequestEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestEcho.message)
}
::std::string* RequestEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestEcho::release_message() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestEcho.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFlush::RequestFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestFlush)
}
RequestFlush::RequestFlush(const RequestFlush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestFlush)
}

void RequestFlush::SharedCtor() {
  _cached_size_ = 0;
}

RequestFlush::~RequestFlush() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestFlush)
  SharedDtor();
}

void RequestFlush::SharedDtor() {
}

void RequestFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFlush::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[7].descriptor;
}

const RequestFlush& RequestFlush::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestFlush* RequestFlush::New(::google::protobuf::Arena* arena) const {
  RequestFlush* n = new RequestFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestFlush)
}

bool RequestFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestFlush)
  return false;
#undef DO_
}

void RequestFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestFlush)
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestFlush)
}

::google::protobuf::uint8* RequestFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestFlush)
  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestFlush)
  return target;
}

size_t RequestFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestFlush)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestFlush)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestFlush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestFlush)
    MergeFrom(*source);
  }
}

void RequestFlush::MergeFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void RequestFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFlush::CopyFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFlush::IsInitialized() const {
  return true;
}

void RequestFlush::Swap(RequestFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFlush::InternalSwap(RequestFlush* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestFlush::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFlush

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInfo::kVersionFieldNumber;
const int RequestInfo::kBlockVersionFieldNumber;
const int RequestInfo::kP2PVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInfo::RequestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&block_version_, &from.block_version_,
    reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_) + sizeof(p2p_version_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestInfo)
}

void RequestInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_version_, 0, reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_) + sizeof(p2p_version_));
  _cached_size_ = 0;
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInfo::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[8].descriptor;
}

const RequestInfo& RequestInfo::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestInfo* RequestInfo::New(::google::protobuf::Arena* arena) const {
  RequestInfo* n = new RequestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestInfo)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_version_, 0, reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_) + sizeof(p2p_version_));
}

bool RequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 block_version = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 p2p_version = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p2p_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestInfo)
  return false;
#undef DO_
}

void RequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestInfo)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // uint64 block_version = 2;
  if (this->block_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->block_version(), output);
  }

  // uint64 p2p_version = 3;
  if (this->p2p_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->p2p_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestInfo)
}

::google::protobuf::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestInfo)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // uint64 block_version = 2;
  if (this->block_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->block_version(), target);
  }

  // uint64 p2p_version = 3;
  if (this->p2p_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->p2p_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestInfo)
  size_t total_size = 0;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint64 block_version = 2;
  if (this->block_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block_version());
  }

  // uint64 p2p_version = 3;
  if (this->p2p_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->p2p_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.block_version() != 0) {
    set_block_version(from.block_version());
  }
  if (from.p2p_version() != 0) {
    set_p2p_version(from.p2p_version());
  }
}

void RequestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::Swap(RequestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInfo::InternalSwap(RequestInfo* other) {
  version_.Swap(&other->version_);
  std::swap(block_version_, other->block_version_);
  std::swap(p2p_version_, other->p2p_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInfo::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestInfo

// string version = 1;
void RequestInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestInfo::version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInfo.version)
  return version_.GetNoArena();
}
void RequestInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestInfo.version)
}
#if LANG_CXX11
void RequestInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestInfo.version)
}
#endif
void RequestInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestInfo.version)
}
void RequestInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestInfo.version)
}
::std::string* RequestInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestInfo::release_version() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestInfo.version)
}

// uint64 block_version = 2;
void RequestInfo::clear_block_version() {
  block_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestInfo::block_version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInfo.block_version)
  return block_version_;
}
void RequestInfo::set_block_version(::google::protobuf::uint64 value) {
  
  block_version_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestInfo.block_version)
}

// uint64 p2p_version = 3;
void RequestInfo::clear_p2p_version() {
  p2p_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestInfo::p2p_version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInfo.p2p_version)
  return p2p_version_;
}
void RequestInfo::set_p2p_version(::google::protobuf::uint64 value) {
  
  p2p_version_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestInfo.p2p_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetOption::kKeyFieldNumber;
const int RequestSetOption::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetOption::RequestSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestSetOption)
}
RequestSetOption::RequestSetOption(const RequestSetOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestSetOption)
}

void RequestSetOption::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestSetOption::~RequestSetOption() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestSetOption)
  SharedDtor();
}

void RequestSetOption::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetOption::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[9].descriptor;
}

const RequestSetOption& RequestSetOption::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestSetOption* RequestSetOption::New(::google::protobuf::Arena* arena) const {
  RequestSetOption* n = new RequestSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestSetOption)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestSetOption.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestSetOption.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestSetOption)
  return false;
#undef DO_
}

void RequestSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestSetOption)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestSetOption)
}

::google::protobuf::uint8* RequestSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestSetOption)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestSetOption)
  return target;
}

size_t RequestSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestSetOption)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSetOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestSetOption)
    MergeFrom(*source);
  }
}

void RequestSetOption::MergeFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RequestSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetOption::CopyFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetOption::IsInitialized() const {
  return true;
}

void RequestSetOption::Swap(RequestSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetOption::InternalSwap(RequestSetOption* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSetOption::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSetOption

// string key = 1;
void RequestSetOption::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestSetOption::key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestSetOption.key)
  return key_.GetNoArena();
}
void RequestSetOption::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestSetOption.key)
}
#if LANG_CXX11
void RequestSetOption::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestSetOption.key)
}
#endif
void RequestSetOption::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestSetOption.key)
}
void RequestSetOption::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestSetOption.key)
}
::std::string* RequestSetOption::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestSetOption.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestSetOption::release_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestSetOption.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestSetOption::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestSetOption.key)
}

// string value = 2;
void RequestSetOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestSetOption::value() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestSetOption.value)
  return value_.GetNoArena();
}
void RequestSetOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestSetOption.value)
}
#if LANG_CXX11
void RequestSetOption::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestSetOption.value)
}
#endif
void RequestSetOption::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestSetOption.value)
}
void RequestSetOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestSetOption.value)
}
::std::string* RequestSetOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestSetOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestSetOption::release_value() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestSetOption.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestSetOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestSetOption.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInitChain::kTimeFieldNumber;
const int RequestInitChain::kChainIdFieldNumber;
const int RequestInitChain::kConsensusParamsFieldNumber;
const int RequestInitChain::kValidatorsFieldNumber;
const int RequestInitChain::kAppStateBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInitChain::RequestInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      validators_(from.validators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_state_bytes().size() > 0) {
    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_consensus_params()) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&consensus_params_) -
    reinterpret_cast<char*>(&time_) + sizeof(consensus_params_));
  _cached_size_ = 0;
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestInitChain)
  SharedDtor();
}

void RequestInitChain::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete time_;
  }
  if (this != internal_default_instance()) {
    delete consensus_params_;
  }
}

void RequestInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInitChain::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[10].descriptor;
}

const RequestInitChain& RequestInitChain::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestInitChain* RequestInitChain::New(::google::protobuf::Arena* arena) const {
  RequestInitChain* n = new RequestInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestInitChain)
  validators_.Clear();
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && consensus_params_ != NULL) {
    delete consensus_params_;
  }
  consensus_params_ = NULL;
}

bool RequestInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Timestamp time = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestInitChain.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ConsensusParams consensus_params = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validators()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bytes app_state_bytes = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_state_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestInitChain)
  return false;
#undef DO_
}

void RequestInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestInitChain)
  // .suil.tmsp.types.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_, output);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInitChain.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 3;
  if (this->has_consensus_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->consensus_params_, output);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->validators(i), output);
  }

  // bytes app_state_bytes = 5;
  if (this->app_state_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->app_state_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestInitChain)
}

::google::protobuf::uint8* RequestInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestInitChain)
  // .suil.tmsp.types.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_, false, target);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInitChain.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chain_id(), target);
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 3;
  if (this->has_consensus_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->consensus_params_, false, target);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->validators(i), false, target);
  }

  // bytes app_state_bytes = 5;
  if (this->app_state_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->app_state_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestInitChain)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
  {
    unsigned int count = this->validators_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->validators(i));
    }
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // bytes app_state_bytes = 5;
  if (this->app_state_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_state_bytes());
  }

  // .suil.tmsp.types.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 3;
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInitChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestInitChain)
    MergeFrom(*source);
  }
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  validators_.MergeFrom(from.validators_);
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.app_state_bytes().size() > 0) {

    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.has_consensus_params()) {
    mutable_consensus_params()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_params());
  }
}

void RequestInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::Swap(RequestInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInitChain::InternalSwap(RequestInitChain* other) {
  validators_.UnsafeArenaSwap(&other->validators_);
  chain_id_.Swap(&other->chain_id_);
  app_state_bytes_.Swap(&other->app_state_bytes_);
  std::swap(time_, other->time_);
  std::swap(consensus_params_, other->consensus_params_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInitChain::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestInitChain

// .suil.tmsp.types.Timestamp time = 1;
bool RequestInitChain::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
void RequestInitChain::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::suil::tmsp::types::Timestamp& RequestInitChain::time() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInitChain.time)
  return time_ != NULL ? *time_
                         : *::suil::tmsp::types::Timestamp::internal_default_instance();
}
::suil::tmsp::types::Timestamp* RequestInitChain::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::suil::tmsp::types::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInitChain.time)
  return time_;
}
::suil::tmsp::types::Timestamp* RequestInitChain::release_time() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestInitChain.time)
  
  ::suil::tmsp::types::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void RequestInitChain::set_allocated_time(::suil::tmsp::types::Timestamp* time) {
  delete time_;
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestInitChain.time)
}

// string chain_id = 2;
void RequestInitChain::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestInitChain::chain_id() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInitChain.chain_id)
  return chain_id_.GetNoArena();
}
void RequestInitChain::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestInitChain.chain_id)
}
#if LANG_CXX11
void RequestInitChain::set_chain_id(::std::string&& value) {
  
  chain_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestInitChain.chain_id)
}
#endif
void RequestInitChain::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestInitChain.chain_id)
}
void RequestInitChain::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestInitChain.chain_id)
}
::std::string* RequestInitChain::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInitChain.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestInitChain::release_chain_id() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestInitChain.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestInitChain::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestInitChain.chain_id)
}

// .suil.tmsp.types.ConsensusParams consensus_params = 3;
bool RequestInitChain::has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != NULL;
}
void RequestInitChain::clear_consensus_params() {
  if (GetArenaNoVirtual() == NULL && consensus_params_ != NULL) delete consensus_params_;
  consensus_params_ = NULL;
}
const ::suil::tmsp::types::ConsensusParams& RequestInitChain::consensus_params() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInitChain.consensus_params)
  return consensus_params_ != NULL ? *consensus_params_
                         : *::suil::tmsp::types::ConsensusParams::internal_default_instance();
}
::suil::tmsp::types::ConsensusParams* RequestInitChain::mutable_consensus_params() {
  
  if (consensus_params_ == NULL) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInitChain.consensus_params)
  return consensus_params_;
}
::suil::tmsp::types::ConsensusParams* RequestInitChain::release_consensus_params() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestInitChain.consensus_params)
  
  ::suil::tmsp::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = NULL;
  return temp;
}
void RequestInitChain::set_allocated_consensus_params(::suil::tmsp::types::ConsensusParams* consensus_params) {
  delete consensus_params_;
  consensus_params_ = consensus_params;
  if (consensus_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestInitChain.consensus_params)
}

// repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
int RequestInitChain::validators_size() const {
  return validators_.size();
}
void RequestInitChain::clear_validators() {
  validators_.Clear();
}
const ::suil::tmsp::types::ValidatorUpdate& RequestInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInitChain.validators)
  return validators_.Get(index);
}
::suil::tmsp::types::ValidatorUpdate* RequestInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInitChain.validators)
  return validators_.Mutable(index);
}
::suil::tmsp::types::ValidatorUpdate* RequestInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.RequestInitChain.validators)
  return validators_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >*
RequestInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.RequestInitChain.validators)
  return &validators_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >&
RequestInitChain::validators() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.RequestInitChain.validators)
  return validators_;
}

// bytes app_state_bytes = 5;
void RequestInitChain::clear_app_state_bytes() {
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestInitChain::app_state_bytes() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestInitChain.app_state_bytes)
  return app_state_bytes_.GetNoArena();
}
void RequestInitChain::set_app_state_bytes(const ::std::string& value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestInitChain.app_state_bytes)
}
#if LANG_CXX11
void RequestInitChain::set_app_state_bytes(::std::string&& value) {
  
  app_state_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestInitChain.app_state_bytes)
}
#endif
void RequestInitChain::set_app_state_bytes(const char* value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestInitChain.app_state_bytes)
}
void RequestInitChain::set_app_state_bytes(const void* value, size_t size) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestInitChain.app_state_bytes)
}
::std::string* RequestInitChain::mutable_app_state_bytes() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestInitChain.app_state_bytes)
  return app_state_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestInitChain::release_app_state_bytes() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestInitChain.app_state_bytes)
  
  return app_state_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestInitChain::set_allocated_app_state_bytes(::std::string* app_state_bytes) {
  if (app_state_bytes != NULL) {
    
  } else {
    
  }
  app_state_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_state_bytes);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestInitChain.app_state_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kDataFieldNumber;
const int RequestQuery::kPathFieldNumber;
const int RequestQuery::kHeightFieldNumber;
const int RequestQuery::kProveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_) + sizeof(prove_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestQuery)
}

void RequestQuery::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_) + sizeof(prove_));
  _cached_size_ = 0;
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuery::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[11].descriptor;
}

const RequestQuery& RequestQuery::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestQuery* RequestQuery::New(::google::protobuf::Arena* arena) const {
  RequestQuery* n = new RequestQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestQuery)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_) + sizeof(prove_));
}

bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestQuery.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prove = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestQuery)
  return false;
#undef DO_
}

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestQuery)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestQuery.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prove(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestQuery)
}

::google::protobuf::uint8* RequestQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestQuery)
  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestQuery.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->height(), target);
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prove(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestQuery)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestQuery)
    MergeFrom(*source);
  }
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.prove() != 0) {
    set_prove(from.prove());
  }
}

void RequestQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  data_.Swap(&other->data_);
  path_.Swap(&other->path_);
  std::swap(height_, other->height_);
  std::swap(prove_, other->prove_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuery::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuery

// bytes data = 1;
void RequestQuery::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestQuery::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestQuery.data)
  return data_.GetNoArena();
}
void RequestQuery::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestQuery.data)
}
#if LANG_CXX11
void RequestQuery::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestQuery.data)
}
#endif
void RequestQuery::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestQuery.data)
}
void RequestQuery::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestQuery.data)
}
::std::string* RequestQuery::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestQuery.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestQuery::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestQuery.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestQuery::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestQuery.data)
}

// string path = 2;
void RequestQuery::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestQuery::path() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestQuery.path)
  return path_.GetNoArena();
}
void RequestQuery::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestQuery.path)
}
#if LANG_CXX11
void RequestQuery::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestQuery.path)
}
#endif
void RequestQuery::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestQuery.path)
}
void RequestQuery::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestQuery.path)
}
::std::string* RequestQuery::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestQuery.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestQuery::release_path() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestQuery.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestQuery::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestQuery.path)
}

// int64 height = 3;
void RequestQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RequestQuery::height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestQuery.height)
  return height_;
}
void RequestQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestQuery.height)
}

// bool prove = 4;
void RequestQuery::clear_prove() {
  prove_ = false;
}
bool RequestQuery::prove() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestQuery.prove)
  return prove_;
}
void RequestQuery::set_prove(bool value) {
  
  prove_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestQuery.prove)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBeginBlock::kHashFieldNumber;
const int RequestBeginBlock::kHeaderFieldNumber;
const int RequestBeginBlock::kLastCommitInfoFieldNumber;
const int RequestBeginBlock::kByzantineValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBeginBlock::RequestBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      byzantine_validators_(from.byzantine_validators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    header_ = new ::suil::tmsp::types::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_last_commit_info()) {
    last_commit_info_ = new ::suil::tmsp::types::LastCommitInfo(*from.last_commit_info_);
  } else {
    last_commit_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&last_commit_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(last_commit_info_));
  _cached_size_ = 0;
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestBeginBlock)
  SharedDtor();
}

void RequestBeginBlock::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete last_commit_info_;
  }
}

void RequestBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBeginBlock::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[12].descriptor;
}

const RequestBeginBlock& RequestBeginBlock::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestBeginBlock* RequestBeginBlock::New(::google::protobuf::Arena* arena) const {
  RequestBeginBlock* n = new RequestBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestBeginBlock)
  byzantine_validators_.Clear();
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_commit_info_ != NULL) {
    delete last_commit_info_;
  }
  last_commit_info_ = NULL;
}

bool RequestBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Header header = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_commit_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_byzantine_validators()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestBeginBlock)
  return false;
#undef DO_
}

void RequestBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestBeginBlock)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .suil.tmsp.types.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
  if (this->has_last_commit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->last_commit_info_, output);
  }

  // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
  for (unsigned int i = 0, n = this->byzantine_validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->byzantine_validators(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestBeginBlock)
}

::google::protobuf::uint8* RequestBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestBeginBlock)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .suil.tmsp.types.Header header = 2;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
  if (this->has_last_commit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->last_commit_info_, false, target);
  }

  // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
  for (unsigned int i = 0, n = this->byzantine_validators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->byzantine_validators(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestBeginBlock)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
  {
    unsigned int count = this->byzantine_validators_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->byzantine_validators(i));
    }
  }

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .suil.tmsp.types.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
  if (this->has_last_commit_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_commit_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBeginBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestBeginBlock)
    MergeFrom(*source);
  }
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    mutable_header()->::suil::tmsp::types::Header::MergeFrom(from.header());
  }
  if (from.has_last_commit_info()) {
    mutable_last_commit_info()->::suil::tmsp::types::LastCommitInfo::MergeFrom(from.last_commit_info());
  }
}

void RequestBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::Swap(RequestBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  byzantine_validators_.UnsafeArenaSwap(&other->byzantine_validators_);
  hash_.Swap(&other->hash_);
  std::swap(header_, other->header_);
  std::swap(last_commit_info_, other->last_commit_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestBeginBlock::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestBeginBlock

// bytes hash = 1;
void RequestBeginBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestBeginBlock::hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestBeginBlock.hash)
  return hash_.GetNoArena();
}
void RequestBeginBlock::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestBeginBlock.hash)
}
#if LANG_CXX11
void RequestBeginBlock::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestBeginBlock.hash)
}
#endif
void RequestBeginBlock::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestBeginBlock.hash)
}
void RequestBeginBlock::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestBeginBlock.hash)
}
::std::string* RequestBeginBlock::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestBeginBlock.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestBeginBlock::release_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestBeginBlock.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestBeginBlock::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestBeginBlock.hash)
}

// .suil.tmsp.types.Header header = 2;
bool RequestBeginBlock::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RequestBeginBlock::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::suil::tmsp::types::Header& RequestBeginBlock::header() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestBeginBlock.header)
  return header_ != NULL ? *header_
                         : *::suil::tmsp::types::Header::internal_default_instance();
}
::suil::tmsp::types::Header* RequestBeginBlock::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::suil::tmsp::types::Header;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestBeginBlock.header)
  return header_;
}
::suil::tmsp::types::Header* RequestBeginBlock::release_header() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestBeginBlock.header)
  
  ::suil::tmsp::types::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RequestBeginBlock::set_allocated_header(::suil::tmsp::types::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestBeginBlock.header)
}

// .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
bool RequestBeginBlock::has_last_commit_info() const {
  return this != internal_default_instance() && last_commit_info_ != NULL;
}
void RequestBeginBlock::clear_last_commit_info() {
  if (GetArenaNoVirtual() == NULL && last_commit_info_ != NULL) delete last_commit_info_;
  last_commit_info_ = NULL;
}
const ::suil::tmsp::types::LastCommitInfo& RequestBeginBlock::last_commit_info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestBeginBlock.last_commit_info)
  return last_commit_info_ != NULL ? *last_commit_info_
                         : *::suil::tmsp::types::LastCommitInfo::internal_default_instance();
}
::suil::tmsp::types::LastCommitInfo* RequestBeginBlock::mutable_last_commit_info() {
  
  if (last_commit_info_ == NULL) {
    last_commit_info_ = new ::suil::tmsp::types::LastCommitInfo;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestBeginBlock.last_commit_info)
  return last_commit_info_;
}
::suil::tmsp::types::LastCommitInfo* RequestBeginBlock::release_last_commit_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestBeginBlock.last_commit_info)
  
  ::suil::tmsp::types::LastCommitInfo* temp = last_commit_info_;
  last_commit_info_ = NULL;
  return temp;
}
void RequestBeginBlock::set_allocated_last_commit_info(::suil::tmsp::types::LastCommitInfo* last_commit_info) {
  delete last_commit_info_;
  last_commit_info_ = last_commit_info;
  if (last_commit_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestBeginBlock.last_commit_info)
}

// repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
int RequestBeginBlock::byzantine_validators_size() const {
  return byzantine_validators_.size();
}
void RequestBeginBlock::clear_byzantine_validators() {
  byzantine_validators_.Clear();
}
const ::suil::tmsp::types::Evidence& RequestBeginBlock::byzantine_validators(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Get(index);
}
::suil::tmsp::types::Evidence* RequestBeginBlock::mutable_byzantine_validators(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Mutable(index);
}
::suil::tmsp::types::Evidence* RequestBeginBlock::add_byzantine_validators() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::Evidence >*
RequestBeginBlock::mutable_byzantine_validators() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.RequestBeginBlock.byzantine_validators)
  return &byzantine_validators_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::Evidence >&
RequestBeginBlock::byzantine_validators() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCheckTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCheckTx::RequestCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestCheckTx)
}
RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestCheckTx)
}

void RequestCheckTx::SharedCtor() {
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestCheckTx)
  SharedDtor();
}

void RequestCheckTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCheckTx::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[13].descriptor;
}

const RequestCheckTx& RequestCheckTx::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestCheckTx* RequestCheckTx::New(::google::protobuf::Arena* arena) const {
  RequestCheckTx* n = new RequestCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestCheckTx)
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestCheckTx)
  return false;
#undef DO_
}

void RequestCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestCheckTx)
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestCheckTx)
}

::google::protobuf::uint8* RequestCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestCheckTx)
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestCheckTx)
  return target;
}

size_t RequestCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestCheckTx)
  size_t total_size = 0;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCheckTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestCheckTx)
    MergeFrom(*source);
  }
}

void RequestCheckTx::MergeFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {
  return true;
}

void RequestCheckTx::Swap(RequestCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  tx_.Swap(&other->tx_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCheckTx::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCheckTx

// bytes tx = 1;
void RequestCheckTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestCheckTx::tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestCheckTx.tx)
  return tx_.GetNoArena();
}
void RequestCheckTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestCheckTx.tx)
}
#if LANG_CXX11
void RequestCheckTx::set_tx(::std::string&& value) {
  
  tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestCheckTx.tx)
}
#endif
void RequestCheckTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestCheckTx.tx)
}
void RequestCheckTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestCheckTx.tx)
}
::std::string* RequestCheckTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestCheckTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestCheckTx::release_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestCheckTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestCheckTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestCheckTx.tx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDeliverTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDeliverTx::RequestDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestDeliverTx)
  SharedDtor();
}

void RequestDeliverTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDeliverTx::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[14].descriptor;
}

const RequestDeliverTx& RequestDeliverTx::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestDeliverTx* RequestDeliverTx::New(::google::protobuf::Arena* arena) const {
  RequestDeliverTx* n = new RequestDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestDeliverTx)
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestDeliverTx)
  return false;
#undef DO_
}

void RequestDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestDeliverTx)
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestDeliverTx)
}

::google::protobuf::uint8* RequestDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestDeliverTx)
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestDeliverTx)
  size_t total_size = 0;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDeliverTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestDeliverTx)
    MergeFrom(*source);
  }
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::Swap(RequestDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  tx_.Swap(&other->tx_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDeliverTx::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDeliverTx

// bytes tx = 1;
void RequestDeliverTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestDeliverTx::tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestDeliverTx.tx)
  return tx_.GetNoArena();
}
void RequestDeliverTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestDeliverTx.tx)
}
#if LANG_CXX11
void RequestDeliverTx::set_tx(::std::string&& value) {
  
  tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.RequestDeliverTx.tx)
}
#endif
void RequestDeliverTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.RequestDeliverTx.tx)
}
void RequestDeliverTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.RequestDeliverTx.tx)
}
::std::string* RequestDeliverTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.RequestDeliverTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestDeliverTx::release_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.RequestDeliverTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestDeliverTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.RequestDeliverTx.tx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEndBlock::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEndBlock::RequestEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestEndBlock)
}
RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestEndBlock)
}

void RequestEndBlock::SharedCtor() {
  height_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestEndBlock)
  SharedDtor();
}

void RequestEndBlock::SharedDtor() {
}

void RequestEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEndBlock::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[15].descriptor;
}

const RequestEndBlock& RequestEndBlock::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestEndBlock* RequestEndBlock::New(::google::protobuf::Arena* arena) const {
  RequestEndBlock* n = new RequestEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestEndBlock)
  height_ = GOOGLE_LONGLONG(0);
}

bool RequestEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 height = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestEndBlock)
  return false;
#undef DO_
}

void RequestEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestEndBlock)
  // int64 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestEndBlock)
}

::google::protobuf::uint8* RequestEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestEndBlock)
  // int64 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestEndBlock)
  return target;
}

size_t RequestEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestEndBlock)
  size_t total_size = 0;

  // int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestEndBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestEndBlock)
    MergeFrom(*source);
  }
}

void RequestEndBlock::MergeFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void RequestEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {
  return true;
}

void RequestEndBlock::Swap(RequestEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEndBlock::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEndBlock

// int64 height = 1;
void RequestEndBlock::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RequestEndBlock::height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.RequestEndBlock.height)
  return height_;
}
void RequestEndBlock::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.RequestEndBlock.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCommit::RequestCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestCommit)
}
RequestCommit::RequestCommit(const RequestCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestCommit)
}

void RequestCommit::SharedCtor() {
  _cached_size_ = 0;
}

RequestCommit::~RequestCommit() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestCommit)
  SharedDtor();
}

void RequestCommit::SharedDtor() {
}

void RequestCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommit::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[16].descriptor;
}

const RequestCommit& RequestCommit::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestCommit* RequestCommit::New(::google::protobuf::Arena* arena) const {
  RequestCommit* n = new RequestCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestCommit)
}

bool RequestCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestCommit)
  return false;
#undef DO_
}

void RequestCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestCommit)
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestCommit)
}

::google::protobuf::uint8* RequestCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.RequestCommit)
  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.RequestCommit)
  return target;
}

size_t RequestCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestCommit)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.RequestCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.RequestCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.RequestCommit)
    MergeFrom(*source);
  }
}

void RequestCommit::MergeFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void RequestCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommit::CopyFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommit::IsInitialized() const {
  return true;
}

void RequestCommit::Swap(RequestCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCommit::InternalSwap(RequestCommit* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCommit::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCommit

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kExceptionFieldNumber;
const int Response::kEchoFieldNumber;
const int Response::kFlushFieldNumber;
const int Response::kInfoFieldNumber;
const int Response::kSetOptionFieldNumber;
const int Response::kInitChainFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kBeginBlockFieldNumber;
const int Response::kCheckTxFieldNumber;
const int Response::kDeliverTxFieldNumber;
const int Response::kEndBlockFieldNumber;
const int Response::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::suil::tmsp::types::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Response)
}

void Response::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[17].descriptor;
}

const Response& Response::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:suil.tmsp.types.Response)
  switch (value_case()) {
    case kException: {
      delete value_.exception_;
      break;
    }
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Response)
  clear_value();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.ResponseException exception = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseEcho echo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseFlush flush = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseInfo info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseSetOption set_option = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseInitChain init_chain = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseQuery query = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseEndBlock end_block = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseCommit commit = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Response)
  // .suil.tmsp.types.ResponseException exception = 1;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.exception_, output);
  }

  // .suil.tmsp.types.ResponseEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // .suil.tmsp.types.ResponseFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // .suil.tmsp.types.ResponseInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // .suil.tmsp.types.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // .suil.tmsp.types.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // .suil.tmsp.types.ResponseQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.deliver_tx_, output);
  }

  // .suil.tmsp.types.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // .suil.tmsp.types.ResponseCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Response)
  // .suil.tmsp.types.ResponseException exception = 1;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *value_.exception_, false, target);
  }

  // .suil.tmsp.types.ResponseEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.echo_, false, target);
  }

  // .suil.tmsp.types.ResponseFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.flush_, false, target);
  }

  // .suil.tmsp.types.ResponseInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *value_.info_, false, target);
  }

  // .suil.tmsp.types.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *value_.set_option_, false, target);
  }

  // .suil.tmsp.types.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *value_.init_chain_, false, target);
  }

  // .suil.tmsp.types.ResponseQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *value_.query_, false, target);
  }

  // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *value_.begin_block_, false, target);
  }

  // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *value_.check_tx_, false, target);
  }

  // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *value_.deliver_tx_, false, target);
  }

  // .suil.tmsp.types.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.end_block_, false, target);
  }

  // .suil.tmsp.types.ResponseCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *value_.commit_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Response)
  size_t total_size = 0;

  switch (value_case()) {
    // .suil.tmsp.types.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.exception_);
      break;
    }
    // .suil.tmsp.types.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.echo_);
      break;
    }
    // .suil.tmsp.types.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.flush_);
      break;
    }
    // .suil.tmsp.types.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.info_);
      break;
    }
    // .suil.tmsp.types.ResponseSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.set_option_);
      break;
    }
    // .suil.tmsp.types.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.init_chain_);
      break;
    }
    // .suil.tmsp.types.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.query_);
      break;
    }
    // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.begin_block_);
      break;
    }
    // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.check_tx_);
      break;
    }
    // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.deliver_tx_);
      break;
    }
    // .suil.tmsp.types.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_block_);
      break;
    }
    // .suil.tmsp.types.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::suil::tmsp::types::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// .suil.tmsp.types.ResponseException exception = 1;
bool Response::has_exception() const {
  return value_case() == kException;
}
void Response::set_has_exception() {
  _oneof_case_[0] = kException;
}
void Response::clear_exception() {
  if (has_exception()) {
    delete value_.exception_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseException& Response::exception() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.exception)
  return has_exception()
      ? *value_.exception_
      : ::suil::tmsp::types::ResponseException::default_instance();
}
::suil::tmsp::types::ResponseException* Response::mutable_exception() {
  if (!has_exception()) {
    clear_value();
    set_has_exception();
    value_.exception_ = new ::suil::tmsp::types::ResponseException;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.exception)
  return value_.exception_;
}
::suil::tmsp::types::ResponseException* Response::release_exception() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.exception)
  if (has_exception()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseException* temp = value_.exception_;
    value_.exception_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_exception(::suil::tmsp::types::ResponseException* exception) {
  clear_value();
  if (exception) {
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.exception)
}

// .suil.tmsp.types.ResponseEcho echo = 2;
bool Response::has_echo() const {
  return value_case() == kEcho;
}
void Response::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
void Response::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseEcho& Response::echo() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.echo)
  return has_echo()
      ? *value_.echo_
      : ::suil::tmsp::types::ResponseEcho::default_instance();
}
::suil::tmsp::types::ResponseEcho* Response::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::suil::tmsp::types::ResponseEcho;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.echo)
  return value_.echo_;
}
::suil::tmsp::types::ResponseEcho* Response::release_echo() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.echo)
  if (has_echo()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_echo(::suil::tmsp::types::ResponseEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.echo)
}

// .suil.tmsp.types.ResponseFlush flush = 3;
bool Response::has_flush() const {
  return value_case() == kFlush;
}
void Response::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
void Response::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseFlush& Response::flush() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.flush)
  return has_flush()
      ? *value_.flush_
      : ::suil::tmsp::types::ResponseFlush::default_instance();
}
::suil::tmsp::types::ResponseFlush* Response::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::suil::tmsp::types::ResponseFlush;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.flush)
  return value_.flush_;
}
::suil::tmsp::types::ResponseFlush* Response::release_flush() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.flush)
  if (has_flush()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_flush(::suil::tmsp::types::ResponseFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.flush)
}

// .suil.tmsp.types.ResponseInfo info = 4;
bool Response::has_info() const {
  return value_case() == kInfo;
}
void Response::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Response::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseInfo& Response::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.info)
  return has_info()
      ? *value_.info_
      : ::suil::tmsp::types::ResponseInfo::default_instance();
}
::suil::tmsp::types::ResponseInfo* Response::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::suil::tmsp::types::ResponseInfo;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.info)
  return value_.info_;
}
::suil::tmsp::types::ResponseInfo* Response::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.info)
  if (has_info()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_info(::suil::tmsp::types::ResponseInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.info)
}

// .suil.tmsp.types.ResponseSetOption set_option = 5;
bool Response::has_set_option() const {
  return value_case() == kSetOption;
}
void Response::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
void Response::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseSetOption& Response::set_option() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::suil::tmsp::types::ResponseSetOption::default_instance();
}
::suil::tmsp::types::ResponseSetOption* Response::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::suil::tmsp::types::ResponseSetOption;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.set_option)
  return value_.set_option_;
}
::suil::tmsp::types::ResponseSetOption* Response::release_set_option() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_set_option(::suil::tmsp::types::ResponseSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.set_option)
}

// .suil.tmsp.types.ResponseInitChain init_chain = 6;
bool Response::has_init_chain() const {
  return value_case() == kInitChain;
}
void Response::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
void Response::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseInitChain& Response::init_chain() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::suil::tmsp::types::ResponseInitChain::default_instance();
}
::suil::tmsp::types::ResponseInitChain* Response::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::suil::tmsp::types::ResponseInitChain;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.init_chain)
  return value_.init_chain_;
}
::suil::tmsp::types::ResponseInitChain* Response::release_init_chain() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_init_chain(::suil::tmsp::types::ResponseInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.init_chain)
}

// .suil.tmsp.types.ResponseQuery query = 7;
bool Response::has_query() const {
  return value_case() == kQuery;
}
void Response::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Response::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseQuery& Response::query() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.query)
  return has_query()
      ? *value_.query_
      : ::suil::tmsp::types::ResponseQuery::default_instance();
}
::suil::tmsp::types::ResponseQuery* Response::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::suil::tmsp::types::ResponseQuery;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.query)
  return value_.query_;
}
::suil::tmsp::types::ResponseQuery* Response::release_query() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.query)
  if (has_query()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_query(::suil::tmsp::types::ResponseQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.query)
}

// .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
bool Response::has_begin_block() const {
  return value_case() == kBeginBlock;
}
void Response::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
void Response::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseBeginBlock& Response::begin_block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::suil::tmsp::types::ResponseBeginBlock::default_instance();
}
::suil::tmsp::types::ResponseBeginBlock* Response::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::suil::tmsp::types::ResponseBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.begin_block)
  return value_.begin_block_;
}
::suil::tmsp::types::ResponseBeginBlock* Response::release_begin_block() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_begin_block(::suil::tmsp::types::ResponseBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.begin_block)
}

// .suil.tmsp.types.ResponseCheckTx check_tx = 9;
bool Response::has_check_tx() const {
  return value_case() == kCheckTx;
}
void Response::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
void Response::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseCheckTx& Response::check_tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::suil::tmsp::types::ResponseCheckTx::default_instance();
}
::suil::tmsp::types::ResponseCheckTx* Response::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::suil::tmsp::types::ResponseCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.check_tx)
  return value_.check_tx_;
}
::suil::tmsp::types::ResponseCheckTx* Response::release_check_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_check_tx(::suil::tmsp::types::ResponseCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.check_tx)
}

// .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
bool Response::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
void Response::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
void Response::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseDeliverTx& Response::deliver_tx() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::suil::tmsp::types::ResponseDeliverTx::default_instance();
}
::suil::tmsp::types::ResponseDeliverTx* Response::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::suil::tmsp::types::ResponseDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.deliver_tx)
  return value_.deliver_tx_;
}
::suil::tmsp::types::ResponseDeliverTx* Response::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_deliver_tx(::suil::tmsp::types::ResponseDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.deliver_tx)
}

// .suil.tmsp.types.ResponseEndBlock end_block = 11;
bool Response::has_end_block() const {
  return value_case() == kEndBlock;
}
void Response::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
void Response::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseEndBlock& Response::end_block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::suil::tmsp::types::ResponseEndBlock::default_instance();
}
::suil::tmsp::types::ResponseEndBlock* Response::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::suil::tmsp::types::ResponseEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.end_block)
  return value_.end_block_;
}
::suil::tmsp::types::ResponseEndBlock* Response::release_end_block() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_end_block(::suil::tmsp::types::ResponseEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.end_block)
}

// .suil.tmsp.types.ResponseCommit commit = 12;
bool Response::has_commit() const {
  return value_case() == kCommit;
}
void Response::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
void Response::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
 const ::suil::tmsp::types::ResponseCommit& Response::commit() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Response.commit)
  return has_commit()
      ? *value_.commit_
      : ::suil::tmsp::types::ResponseCommit::default_instance();
}
::suil::tmsp::types::ResponseCommit* Response::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::suil::tmsp::types::ResponseCommit;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Response.commit)
  return value_.commit_;
}
::suil::tmsp::types::ResponseCommit* Response::release_commit() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Response.commit)
  if (has_commit()) {
    clear_has_value();
    ::suil::tmsp::types::ResponseCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_commit(::suil::tmsp::types::ResponseCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.commit)
}

bool Response::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Response::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Response::ValueCase Response::value_case() const {
  return Response::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseException::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseException::ResponseException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseException)
}
ResponseException::ResponseException(const ResponseException& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseException)
}

void ResponseException::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseException)
  SharedDtor();
}

void ResponseException::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseException::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[18].descriptor;
}

const ResponseException& ResponseException::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseException* ResponseException::New(::google::protobuf::Arena* arena) const {
  ResponseException* n = new ResponseException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseException)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseException.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseException)
  return false;
#undef DO_
}

void ResponseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseException)
  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseException.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseException)
}

::google::protobuf::uint8* ResponseException::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseException)
  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseException.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseException)
  return target;
}

size_t ResponseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseException)
  size_t total_size = 0;

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseException* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseException)
    MergeFrom(*source);
  }
}

void ResponseException::MergeFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ResponseException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {
  return true;
}

void ResponseException::Swap(ResponseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseException::InternalSwap(ResponseException* other) {
  error_.Swap(&other->error_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseException::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseException

// string error = 1;
void ResponseException::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseException::error() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseException.error)
  return error_.GetNoArena();
}
void ResponseException::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseException.error)
}
#if LANG_CXX11
void ResponseException::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseException.error)
}
#endif
void ResponseException::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseException.error)
}
void ResponseException::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseException.error)
}
::std::string* ResponseException::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseException.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseException::release_error() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseException.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseException::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseException.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEcho::ResponseEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseEcho)
}
ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseEcho)
}

void ResponseEcho::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseEcho)
  SharedDtor();
}

void ResponseEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEcho::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[19].descriptor;
}

const ResponseEcho& ResponseEcho::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseEcho* ResponseEcho::New(::google::protobuf::Arena* arena) const {
  ResponseEcho* n = new ResponseEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseEcho)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseEcho)
  return false;
#undef DO_
}

void ResponseEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseEcho)
  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseEcho)
}

::google::protobuf::uint8* ResponseEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseEcho)
  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseEcho)
  return target;
}

size_t ResponseEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseEcho)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEcho* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseEcho)
    MergeFrom(*source);
  }
}

void ResponseEcho::MergeFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ResponseEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {
  return true;
}

void ResponseEcho::Swap(ResponseEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEcho::InternalSwap(ResponseEcho* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEcho::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEcho

// string message = 1;
void ResponseEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseEcho::message() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseEcho.message)
  return message_.GetNoArena();
}
void ResponseEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseEcho.message)
}
#if LANG_CXX11
void ResponseEcho::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseEcho.message)
}
#endif
void ResponseEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseEcho.message)
}
void ResponseEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseEcho.message)
}
::std::string* ResponseEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseEcho::release_message() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseEcho.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFlush::ResponseFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseFlush)
}
ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseFlush)
}

void ResponseFlush::SharedCtor() {
  _cached_size_ = 0;
}

ResponseFlush::~ResponseFlush() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseFlush)
  SharedDtor();
}

void ResponseFlush::SharedDtor() {
}

void ResponseFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFlush::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[20].descriptor;
}

const ResponseFlush& ResponseFlush::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseFlush* ResponseFlush::New(::google::protobuf::Arena* arena) const {
  ResponseFlush* n = new ResponseFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseFlush)
}

bool ResponseFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseFlush)
  return false;
#undef DO_
}

void ResponseFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseFlush)
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseFlush)
}

::google::protobuf::uint8* ResponseFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseFlush)
  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseFlush)
  return target;
}

size_t ResponseFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseFlush)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseFlush)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseFlush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseFlush)
    MergeFrom(*source);
  }
}

void ResponseFlush::MergeFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ResponseFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFlush::CopyFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFlush::IsInitialized() const {
  return true;
}

void ResponseFlush::Swap(ResponseFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFlush::InternalSwap(ResponseFlush* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseFlush::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseFlush

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInfo::kDataFieldNumber;
const int ResponseInfo::kVersionFieldNumber;
const int ResponseInfo::kAppVersionFieldNumber;
const int ResponseInfo::kLastBlockHeightFieldNumber;
const int ResponseInfo::kLastBlockAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInfo::ResponseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_block_app_hash().size() > 0) {
    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  ::memcpy(&app_version_, &from.app_version_,
    reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_) + sizeof(last_block_height_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseInfo)
}

void ResponseInfo::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_version_, 0, reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_) + sizeof(last_block_height_));
  _cached_size_ = 0;
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseInfo)
  SharedDtor();
}

void ResponseInfo::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInfo::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[21].descriptor;
}

const ResponseInfo& ResponseInfo::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseInfo* ResponseInfo::New(::google::protobuf::Arena* arena) const {
  ResponseInfo* n = new ResponseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseInfo)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_version_, 0, reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_) + sizeof(last_block_height_));
}

bool ResponseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseInfo.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 app_version = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_block_height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_block_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_block_app_hash = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_block_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseInfo)
  return false;
#undef DO_
}

void ResponseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseInfo)
  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // uint64 app_version = 3;
  if (this->app_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->app_version(), output);
  }

  // int64 last_block_height = 4;
  if (this->last_block_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_block_height(), output);
  }

  // bytes last_block_app_hash = 5;
  if (this->last_block_app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->last_block_app_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseInfo)
}

::google::protobuf::uint8* ResponseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseInfo)
  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // uint64 app_version = 3;
  if (this->app_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->app_version(), target);
  }

  // int64 last_block_height = 4;
  if (this->last_block_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_block_height(), target);
  }

  // bytes last_block_app_hash = 5;
  if (this->last_block_app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->last_block_app_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseInfo)
  return target;
}

size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseInfo)
  size_t total_size = 0;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bytes last_block_app_hash = 5;
  if (this->last_block_app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_block_app_hash());
  }

  // uint64 app_version = 3;
  if (this->app_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->app_version());
  }

  // int64 last_block_height = 4;
  if (this->last_block_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_block_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseInfo)
    MergeFrom(*source);
  }
}

void ResponseInfo::MergeFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.last_block_app_hash().size() > 0) {

    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  if (from.app_version() != 0) {
    set_app_version(from.app_version());
  }
  if (from.last_block_height() != 0) {
    set_last_block_height(from.last_block_height());
  }
}

void ResponseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  return true;
}

void ResponseInfo::Swap(ResponseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInfo::InternalSwap(ResponseInfo* other) {
  data_.Swap(&other->data_);
  version_.Swap(&other->version_);
  last_block_app_hash_.Swap(&other->last_block_app_hash_);
  std::swap(app_version_, other->app_version_);
  std::swap(last_block_height_, other->last_block_height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInfo::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseInfo

// string data = 1;
void ResponseInfo::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseInfo::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInfo.data)
  return data_.GetNoArena();
}
void ResponseInfo::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseInfo.data)
}
#if LANG_CXX11
void ResponseInfo::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseInfo.data)
}
#endif
void ResponseInfo::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseInfo.data)
}
void ResponseInfo::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseInfo.data)
}
::std::string* ResponseInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseInfo.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseInfo::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseInfo.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseInfo.data)
}

// string version = 2;
void ResponseInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseInfo::version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInfo.version)
  return version_.GetNoArena();
}
void ResponseInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseInfo.version)
}
#if LANG_CXX11
void ResponseInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseInfo.version)
}
#endif
void ResponseInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseInfo.version)
}
void ResponseInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseInfo.version)
}
::std::string* ResponseInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseInfo::release_version() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseInfo.version)
}

// uint64 app_version = 3;
void ResponseInfo::clear_app_version() {
  app_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseInfo::app_version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInfo.app_version)
  return app_version_;
}
void ResponseInfo::set_app_version(::google::protobuf::uint64 value) {
  
  app_version_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseInfo.app_version)
}

// int64 last_block_height = 4;
void ResponseInfo::clear_last_block_height() {
  last_block_height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseInfo::last_block_height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInfo.last_block_height)
  return last_block_height_;
}
void ResponseInfo::set_last_block_height(::google::protobuf::int64 value) {
  
  last_block_height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseInfo.last_block_height)
}

// bytes last_block_app_hash = 5;
void ResponseInfo::clear_last_block_app_hash() {
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseInfo::last_block_app_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.GetNoArena();
}
void ResponseInfo::set_last_block_app_hash(const ::std::string& value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseInfo.last_block_app_hash)
}
#if LANG_CXX11
void ResponseInfo::set_last_block_app_hash(::std::string&& value) {
  
  last_block_app_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseInfo.last_block_app_hash)
}
#endif
void ResponseInfo::set_last_block_app_hash(const char* value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseInfo.last_block_app_hash)
}
void ResponseInfo::set_last_block_app_hash(const void* value, size_t size) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseInfo.last_block_app_hash)
}
::std::string* ResponseInfo::mutable_last_block_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseInfo::release_last_block_app_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseInfo.last_block_app_hash)
  
  return last_block_app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseInfo::set_allocated_last_block_app_hash(::std::string* last_block_app_hash) {
  if (last_block_app_hash != NULL) {
    
  } else {
    
  }
  last_block_app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_block_app_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseInfo.last_block_app_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSetOption::kCodeFieldNumber;
const int ResponseSetOption::kLogFieldNumber;
const int ResponseSetOption::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSetOption::ResponseSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseSetOption)
}
ResponseSetOption::ResponseSetOption(const ResponseSetOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseSetOption)
}

void ResponseSetOption::SharedCtor() {
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _cached_size_ = 0;
}

ResponseSetOption::~ResponseSetOption() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseSetOption)
  SharedDtor();
}

void ResponseSetOption::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSetOption::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[22].descriptor;
}

const ResponseSetOption& ResponseSetOption::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseSetOption* ResponseSetOption::New(::google::protobuf::Arena* arena) const {
  ResponseSetOption* n = new ResponseSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseSetOption)
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

bool ResponseSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseSetOption.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseSetOption.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseSetOption)
  return false;
#undef DO_
}

void ResponseSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseSetOption)
  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseSetOption)
}

::google::protobuf::uint8* ResponseSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseSetOption)
  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseSetOption)
  return target;
}

size_t ResponseSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseSetOption)
  size_t total_size = 0;

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSetOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseSetOption)
    MergeFrom(*source);
  }
}

void ResponseSetOption::MergeFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSetOption::CopyFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetOption::IsInitialized() const {
  return true;
}

void ResponseSetOption::Swap(ResponseSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSetOption::InternalSwap(ResponseSetOption* other) {
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSetOption::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSetOption

// uint32 code = 1;
void ResponseSetOption::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ResponseSetOption::code() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseSetOption.code)
  return code_;
}
void ResponseSetOption::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseSetOption.code)
}

// string log = 3;
void ResponseSetOption::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseSetOption::log() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseSetOption.log)
  return log_.GetNoArena();
}
void ResponseSetOption::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseSetOption.log)
}
#if LANG_CXX11
void ResponseSetOption::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseSetOption.log)
}
#endif
void ResponseSetOption::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseSetOption.log)
}
void ResponseSetOption::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseSetOption.log)
}
::std::string* ResponseSetOption::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseSetOption.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseSetOption::release_log() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseSetOption.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseSetOption::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseSetOption.log)
}

// string info = 4;
void ResponseSetOption::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseSetOption::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseSetOption.info)
  return info_.GetNoArena();
}
void ResponseSetOption::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseSetOption.info)
}
#if LANG_CXX11
void ResponseSetOption::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseSetOption.info)
}
#endif
void ResponseSetOption::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseSetOption.info)
}
void ResponseSetOption::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseSetOption.info)
}
::std::string* ResponseSetOption::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseSetOption.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseSetOption::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseSetOption.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseSetOption::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseSetOption.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInitChain::kConsensusParamsFieldNumber;
const int ResponseInitChain::kValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInitChain::ResponseInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      validators_(from.validators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consensus_params()) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
  consensus_params_ = NULL;
  _cached_size_ = 0;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseInitChain)
  SharedDtor();
}

void ResponseInitChain::SharedDtor() {
  if (this != internal_default_instance()) {
    delete consensus_params_;
  }
}

void ResponseInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInitChain::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[23].descriptor;
}

const ResponseInitChain& ResponseInitChain::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseInitChain* ResponseInitChain::New(::google::protobuf::Arena* arena) const {
  ResponseInitChain* n = new ResponseInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseInitChain)
  validators_.Clear();
  if (GetArenaNoVirtual() == NULL && consensus_params_ != NULL) {
    delete consensus_params_;
  }
  consensus_params_ = NULL;
}

bool ResponseInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.ConsensusParams consensus_params = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validators()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseInitChain)
  return false;
#undef DO_
}

void ResponseInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseInitChain)
  // .suil.tmsp.types.ConsensusParams consensus_params = 1;
  if (this->has_consensus_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->consensus_params_, output);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->validators(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseInitChain)
}

::google::protobuf::uint8* ResponseInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseInitChain)
  // .suil.tmsp.types.ConsensusParams consensus_params = 1;
  if (this->has_consensus_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->consensus_params_, false, target);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->validators(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseInitChain)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
  {
    unsigned int count = this->validators_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->validators(i));
    }
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 1;
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInitChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseInitChain)
    MergeFrom(*source);
  }
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  validators_.MergeFrom(from.validators_);
  if (from.has_consensus_params()) {
    mutable_consensus_params()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_params());
  }
}

void ResponseInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::Swap(ResponseInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  validators_.UnsafeArenaSwap(&other->validators_);
  std::swap(consensus_params_, other->consensus_params_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInitChain::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseInitChain

// .suil.tmsp.types.ConsensusParams consensus_params = 1;
bool ResponseInitChain::has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != NULL;
}
void ResponseInitChain::clear_consensus_params() {
  if (GetArenaNoVirtual() == NULL && consensus_params_ != NULL) delete consensus_params_;
  consensus_params_ = NULL;
}
const ::suil::tmsp::types::ConsensusParams& ResponseInitChain::consensus_params() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInitChain.consensus_params)
  return consensus_params_ != NULL ? *consensus_params_
                         : *::suil::tmsp::types::ConsensusParams::internal_default_instance();
}
::suil::tmsp::types::ConsensusParams* ResponseInitChain::mutable_consensus_params() {
  
  if (consensus_params_ == NULL) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseInitChain.consensus_params)
  return consensus_params_;
}
::suil::tmsp::types::ConsensusParams* ResponseInitChain::release_consensus_params() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseInitChain.consensus_params)
  
  ::suil::tmsp::types::ConsensusParams* temp = consensus_params_;
  consensus_params_ = NULL;
  return temp;
}
void ResponseInitChain::set_allocated_consensus_params(::suil::tmsp::types::ConsensusParams* consensus_params) {
  delete consensus_params_;
  consensus_params_ = consensus_params;
  if (consensus_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseInitChain.consensus_params)
}

// repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
int ResponseInitChain::validators_size() const {
  return validators_.size();
}
void ResponseInitChain::clear_validators() {
  validators_.Clear();
}
const ::suil::tmsp::types::ValidatorUpdate& ResponseInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseInitChain.validators)
  return validators_.Get(index);
}
::suil::tmsp::types::ValidatorUpdate* ResponseInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseInitChain.validators)
  return validators_.Mutable(index);
}
::suil::tmsp::types::ValidatorUpdate* ResponseInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseInitChain.validators)
  return validators_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >*
ResponseInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseInitChain.validators)
  return &validators_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >&
ResponseInitChain::validators() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseInitChain.validators)
  return validators_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kCodeFieldNumber;
const int ResponseQuery::kLogFieldNumber;
const int ResponseQuery::kInfoFieldNumber;
const int ResponseQuery::kIndexFieldNumber;
const int ResponseQuery::kKeyFieldNumber;
const int ResponseQuery::kValueFieldNumber;
const int ResponseQuery::kProofFieldNumber;
const int ResponseQuery::kHeightFieldNumber;
const int ResponseQuery::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.has_proof()) {
    proof_ = new ::suil::tmsp::types::Proof(*from.proof_);
  } else {
    proof_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&proof_) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete proof_;
  }
}

void ResponseQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[24].descriptor;
}

const ResponseQuery& ResponseQuery::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseQuery* ResponseQuery::New(::google::protobuf::Arena* arena) const {
  ResponseQuery* n = new ResponseQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseQuery)
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && proof_ != NULL) {
    delete proof_;
  }
  proof_ = NULL;
  ::memset(&index_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_) + sizeof(code_));
}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Proof proof = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string codespace = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), this->codespace().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseQuery)
  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->index(), output);
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->key(), output);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // .suil.tmsp.types.Proof proof = 8;
  if (this->has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->proof_, output);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->height(), output);
  }

  // string codespace = 10;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->codespace(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseQuery)
  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->index(), target);
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // .suil.tmsp.types.Proof proof = 8;
  if (this->has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->proof_, false, target);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->height(), target);
  }

  // string codespace = 10;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.codespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->codespace(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseQuery)
  size_t total_size = 0;

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // string codespace = 10;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // .suil.tmsp.types.Proof proof = 8;
  if (this->has_proof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proof_);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.has_proof()) {
    mutable_proof()->::suil::tmsp::types::Proof::MergeFrom(from.proof());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  codespace_.Swap(&other->codespace_);
  std::swap(proof_, other->proof_);
  std::swap(index_, other->index_);
  std::swap(height_, other->height_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuery

// uint32 code = 1;
void ResponseQuery::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ResponseQuery::code() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.code)
  return code_;
}
void ResponseQuery::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.code)
}

// string log = 3;
void ResponseQuery::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::log() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.log)
  return log_.GetNoArena();
}
void ResponseQuery::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.log)
}
#if LANG_CXX11
void ResponseQuery::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseQuery.log)
}
#endif
void ResponseQuery::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseQuery.log)
}
void ResponseQuery::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseQuery.log)
}
::std::string* ResponseQuery::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_log() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.log)
}

// string info = 4;
void ResponseQuery::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.info)
  return info_.GetNoArena();
}
void ResponseQuery::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.info)
}
#if LANG_CXX11
void ResponseQuery::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseQuery.info)
}
#endif
void ResponseQuery::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseQuery.info)
}
void ResponseQuery::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseQuery.info)
}
::std::string* ResponseQuery::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.info)
}

// int64 index = 5;
void ResponseQuery::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseQuery::index() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.index)
  return index_;
}
void ResponseQuery::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.index)
}

// bytes key = 6;
void ResponseQuery::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.key)
  return key_.GetNoArena();
}
void ResponseQuery::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.key)
}
#if LANG_CXX11
void ResponseQuery::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseQuery.key)
}
#endif
void ResponseQuery::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseQuery.key)
}
void ResponseQuery::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseQuery.key)
}
::std::string* ResponseQuery::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.key)
}

// bytes value = 7;
void ResponseQuery::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::value() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.value)
  return value_.GetNoArena();
}
void ResponseQuery::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.value)
}
#if LANG_CXX11
void ResponseQuery::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseQuery.value)
}
#endif
void ResponseQuery::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseQuery.value)
}
void ResponseQuery::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseQuery.value)
}
::std::string* ResponseQuery::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_value() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.value)
}

// .suil.tmsp.types.Proof proof = 8;
bool ResponseQuery::has_proof() const {
  return this != internal_default_instance() && proof_ != NULL;
}
void ResponseQuery::clear_proof() {
  if (GetArenaNoVirtual() == NULL && proof_ != NULL) delete proof_;
  proof_ = NULL;
}
const ::suil::tmsp::types::Proof& ResponseQuery::proof() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.proof)
  return proof_ != NULL ? *proof_
                         : *::suil::tmsp::types::Proof::internal_default_instance();
}
::suil::tmsp::types::Proof* ResponseQuery::mutable_proof() {
  
  if (proof_ == NULL) {
    proof_ = new ::suil::tmsp::types::Proof;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.proof)
  return proof_;
}
::suil::tmsp::types::Proof* ResponseQuery::release_proof() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.proof)
  
  ::suil::tmsp::types::Proof* temp = proof_;
  proof_ = NULL;
  return temp;
}
void ResponseQuery::set_allocated_proof(::suil::tmsp::types::Proof* proof) {
  delete proof_;
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.proof)
}

// int64 height = 9;
void ResponseQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseQuery::height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.height)
  return height_;
}
void ResponseQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.height)
}

// string codespace = 10;
void ResponseQuery::clear_codespace() {
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::codespace() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseQuery.codespace)
  return codespace_.GetNoArena();
}
void ResponseQuery::set_codespace(const ::std::string& value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseQuery.codespace)
}
#if LANG_CXX11
void ResponseQuery::set_codespace(::std::string&& value) {
  
  codespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseQuery.codespace)
}
#endif
void ResponseQuery::set_codespace(const char* value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseQuery.codespace)
}
void ResponseQuery::set_codespace(const char* value, size_t size) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseQuery.codespace)
}
::std::string* ResponseQuery::mutable_codespace() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseQuery.codespace)
  return codespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_codespace() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseQuery.codespace)
  
  return codespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_codespace(::std::string* codespace) {
  if (codespace != NULL) {
    
  } else {
    
  }
  codespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codespace);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseQuery.codespace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseBeginBlock::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBeginBlock::ResponseBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
  _cached_size_ = 0;
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseBeginBlock)
  SharedDtor();
}

void ResponseBeginBlock::SharedDtor() {
}

void ResponseBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBeginBlock::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[25].descriptor;
}

const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseBeginBlock* ResponseBeginBlock::New(::google::protobuf::Arena* arena) const {
  ResponseBeginBlock* n = new ResponseBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseBeginBlock)
  tags_.Clear();
}

bool ResponseBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.KVPair tags = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseBeginBlock)
  return false;
#undef DO_
}

void ResponseBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseBeginBlock)
  // repeated .suil.tmsp.types.KVPair tags = 1;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseBeginBlock)
}

::google::protobuf::uint8* ResponseBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseBeginBlock)
  // repeated .suil.tmsp.types.KVPair tags = 1;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tags(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseBeginBlock)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.KVPair tags = 1;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBeginBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseBeginBlock)
    MergeFrom(*source);
  }
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
}

void ResponseBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::Swap(ResponseBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseBeginBlock::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseBeginBlock

// repeated .suil.tmsp.types.KVPair tags = 1;
int ResponseBeginBlock::tags_size() const {
  return tags_.size();
}
void ResponseBeginBlock::clear_tags() {
  tags_.Clear();
}
const ::suil::tmsp::types::KVPair& ResponseBeginBlock::tags(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseBeginBlock.tags)
  return tags_.Get(index);
}
::suil::tmsp::types::KVPair* ResponseBeginBlock::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseBeginBlock.tags)
  return tags_.Mutable(index);
}
::suil::tmsp::types::KVPair* ResponseBeginBlock::add_tags() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseBeginBlock.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >*
ResponseBeginBlock::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseBeginBlock.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >&
ResponseBeginBlock::tags() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseBeginBlock.tags)
  return tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCheckTx::kCodeFieldNumber;
const int ResponseCheckTx::kDataFieldNumber;
const int ResponseCheckTx::kLogFieldNumber;
const int ResponseCheckTx::kInfoFieldNumber;
const int ResponseCheckTx::kGasWantedFieldNumber;
const int ResponseCheckTx::kGasUsedFieldNumber;
const int ResponseCheckTx::kTagsFieldNumber;
const int ResponseCheckTx::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCheckTx::ResponseCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseCheckTx)
}
ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseCheckTx)
}

void ResponseCheckTx::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseCheckTx)
  SharedDtor();
}

void ResponseCheckTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCheckTx::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[26].descriptor;
}

const ResponseCheckTx& ResponseCheckTx::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseCheckTx* ResponseCheckTx::New(::google::protobuf::Arena* arena) const {
  ResponseCheckTx* n = new ResponseCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseCheckTx)
  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
}

bool ResponseCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string codespace = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), this->codespace().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseCheckTx)
  return false;
#undef DO_
}

void ResponseCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseCheckTx)
  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->codespace(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseCheckTx)
}

::google::protobuf::uint8* ResponseCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseCheckTx)
  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tags(i), false, target);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.codespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->codespace(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseCheckTx)
  return target;
}

size_t ResponseCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseCheckTx)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.KVPair tags = 7;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCheckTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseCheckTx)
    MergeFrom(*source);
  }
}

void ResponseCheckTx::MergeFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {
  return true;
}

void ResponseCheckTx::Swap(ResponseCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  codespace_.Swap(&other->codespace_);
  std::swap(gas_wanted_, other->gas_wanted_);
  std::swap(gas_used_, other->gas_used_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCheckTx::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCheckTx

// uint32 code = 1;
void ResponseCheckTx::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ResponseCheckTx::code() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.code)
  return code_;
}
void ResponseCheckTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.code)
}

// bytes data = 2;
void ResponseCheckTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseCheckTx::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.data)
  return data_.GetNoArena();
}
void ResponseCheckTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.data)
}
#if LANG_CXX11
void ResponseCheckTx::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseCheckTx.data)
}
#endif
void ResponseCheckTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseCheckTx.data)
}
void ResponseCheckTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseCheckTx.data)
}
::std::string* ResponseCheckTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCheckTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseCheckTx::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseCheckTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseCheckTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseCheckTx.data)
}

// string log = 3;
void ResponseCheckTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseCheckTx::log() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.log)
  return log_.GetNoArena();
}
void ResponseCheckTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.log)
}
#if LANG_CXX11
void ResponseCheckTx::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseCheckTx.log)
}
#endif
void ResponseCheckTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseCheckTx.log)
}
void ResponseCheckTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseCheckTx.log)
}
::std::string* ResponseCheckTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCheckTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseCheckTx::release_log() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseCheckTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseCheckTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseCheckTx.log)
}

// string info = 4;
void ResponseCheckTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseCheckTx::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.info)
  return info_.GetNoArena();
}
void ResponseCheckTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.info)
}
#if LANG_CXX11
void ResponseCheckTx::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseCheckTx.info)
}
#endif
void ResponseCheckTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseCheckTx.info)
}
void ResponseCheckTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseCheckTx.info)
}
::std::string* ResponseCheckTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCheckTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseCheckTx::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseCheckTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseCheckTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseCheckTx.info)
}

// int64 gas_wanted = 5;
void ResponseCheckTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseCheckTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.gas_wanted)
  return gas_wanted_;
}
void ResponseCheckTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.gas_wanted)
}

// int64 gas_used = 6;
void ResponseCheckTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseCheckTx::gas_used() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.gas_used)
  return gas_used_;
}
void ResponseCheckTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.gas_used)
}

// repeated .suil.tmsp.types.KVPair tags = 7;
int ResponseCheckTx::tags_size() const {
  return tags_.size();
}
void ResponseCheckTx::clear_tags() {
  tags_.Clear();
}
const ::suil::tmsp::types::KVPair& ResponseCheckTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.tags)
  return tags_.Get(index);
}
::suil::tmsp::types::KVPair* ResponseCheckTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCheckTx.tags)
  return tags_.Mutable(index);
}
::suil::tmsp::types::KVPair* ResponseCheckTx::add_tags() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseCheckTx.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >*
ResponseCheckTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseCheckTx.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >&
ResponseCheckTx::tags() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseCheckTx.tags)
  return tags_;
}

// string codespace = 8;
void ResponseCheckTx::clear_codespace() {
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseCheckTx::codespace() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCheckTx.codespace)
  return codespace_.GetNoArena();
}
void ResponseCheckTx::set_codespace(const ::std::string& value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCheckTx.codespace)
}
#if LANG_CXX11
void ResponseCheckTx::set_codespace(::std::string&& value) {
  
  codespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseCheckTx.codespace)
}
#endif
void ResponseCheckTx::set_codespace(const char* value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseCheckTx.codespace)
}
void ResponseCheckTx::set_codespace(const char* value, size_t size) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseCheckTx.codespace)
}
::std::string* ResponseCheckTx::mutable_codespace() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCheckTx.codespace)
  return codespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseCheckTx::release_codespace() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseCheckTx.codespace)
  
  return codespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseCheckTx::set_allocated_codespace(::std::string* codespace) {
  if (codespace != NULL) {
    
  } else {
    
  }
  codespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codespace);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseCheckTx.codespace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDeliverTx::kCodeFieldNumber;
const int ResponseDeliverTx::kDataFieldNumber;
const int ResponseDeliverTx::kLogFieldNumber;
const int ResponseDeliverTx::kInfoFieldNumber;
const int ResponseDeliverTx::kGasWantedFieldNumber;
const int ResponseDeliverTx::kGasUsedFieldNumber;
const int ResponseDeliverTx::kTagsFieldNumber;
const int ResponseDeliverTx::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDeliverTx::ResponseDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseDeliverTx)
  SharedDtor();
}

void ResponseDeliverTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDeliverTx::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[27].descriptor;
}

const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseDeliverTx* ResponseDeliverTx::New(::google::protobuf::Arena* arena) const {
  ResponseDeliverTx* n = new ResponseDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseDeliverTx)
  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_) + sizeof(code_));
}

bool ResponseDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string codespace = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), this->codespace().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseDeliverTx)
  return false;
#undef DO_
}

void ResponseDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseDeliverTx)
  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->codespace(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseDeliverTx)
}

::google::protobuf::uint8* ResponseDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseDeliverTx)
  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tags(i), false, target);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), this->codespace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.codespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->codespace(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseDeliverTx)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.KVPair tags = 7;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDeliverTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseDeliverTx)
    MergeFrom(*source);
  }
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::Swap(ResponseDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  codespace_.Swap(&other->codespace_);
  std::swap(gas_wanted_, other->gas_wanted_);
  std::swap(gas_used_, other->gas_used_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDeliverTx::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDeliverTx

// uint32 code = 1;
void ResponseDeliverTx::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ResponseDeliverTx::code() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.code)
  return code_;
}
void ResponseDeliverTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.code)
}

// bytes data = 2;
void ResponseDeliverTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseDeliverTx::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.data)
  return data_.GetNoArena();
}
void ResponseDeliverTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.data)
}
#if LANG_CXX11
void ResponseDeliverTx::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseDeliverTx.data)
}
#endif
void ResponseDeliverTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseDeliverTx.data)
}
void ResponseDeliverTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseDeliverTx.data)
}
::std::string* ResponseDeliverTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseDeliverTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseDeliverTx::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseDeliverTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseDeliverTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseDeliverTx.data)
}

// string log = 3;
void ResponseDeliverTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseDeliverTx::log() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.log)
  return log_.GetNoArena();
}
void ResponseDeliverTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.log)
}
#if LANG_CXX11
void ResponseDeliverTx::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseDeliverTx.log)
}
#endif
void ResponseDeliverTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseDeliverTx.log)
}
void ResponseDeliverTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseDeliverTx.log)
}
::std::string* ResponseDeliverTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseDeliverTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseDeliverTx::release_log() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseDeliverTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseDeliverTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseDeliverTx.log)
}

// string info = 4;
void ResponseDeliverTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseDeliverTx::info() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.info)
  return info_.GetNoArena();
}
void ResponseDeliverTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.info)
}
#if LANG_CXX11
void ResponseDeliverTx::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseDeliverTx.info)
}
#endif
void ResponseDeliverTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseDeliverTx.info)
}
void ResponseDeliverTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseDeliverTx.info)
}
::std::string* ResponseDeliverTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseDeliverTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseDeliverTx::release_info() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseDeliverTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseDeliverTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseDeliverTx.info)
}

// int64 gas_wanted = 5;
void ResponseDeliverTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseDeliverTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.gas_wanted)
  return gas_wanted_;
}
void ResponseDeliverTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.gas_wanted)
}

// int64 gas_used = 6;
void ResponseDeliverTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResponseDeliverTx::gas_used() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.gas_used)
  return gas_used_;
}
void ResponseDeliverTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.gas_used)
}

// repeated .suil.tmsp.types.KVPair tags = 7;
int ResponseDeliverTx::tags_size() const {
  return tags_.size();
}
void ResponseDeliverTx::clear_tags() {
  tags_.Clear();
}
const ::suil::tmsp::types::KVPair& ResponseDeliverTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.tags)
  return tags_.Get(index);
}
::suil::tmsp::types::KVPair* ResponseDeliverTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseDeliverTx.tags)
  return tags_.Mutable(index);
}
::suil::tmsp::types::KVPair* ResponseDeliverTx::add_tags() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseDeliverTx.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >*
ResponseDeliverTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseDeliverTx.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >&
ResponseDeliverTx::tags() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseDeliverTx.tags)
  return tags_;
}

// string codespace = 8;
void ResponseDeliverTx::clear_codespace() {
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseDeliverTx::codespace() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseDeliverTx.codespace)
  return codespace_.GetNoArena();
}
void ResponseDeliverTx::set_codespace(const ::std::string& value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseDeliverTx.codespace)
}
#if LANG_CXX11
void ResponseDeliverTx::set_codespace(::std::string&& value) {
  
  codespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseDeliverTx.codespace)
}
#endif
void ResponseDeliverTx::set_codespace(const char* value) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseDeliverTx.codespace)
}
void ResponseDeliverTx::set_codespace(const char* value, size_t size) {
  
  codespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseDeliverTx.codespace)
}
::std::string* ResponseDeliverTx::mutable_codespace() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseDeliverTx.codespace)
  return codespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseDeliverTx::release_codespace() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseDeliverTx.codespace)
  
  return codespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseDeliverTx::set_allocated_codespace(::std::string* codespace) {
  if (codespace != NULL) {
    
  } else {
    
  }
  codespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codespace);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseDeliverTx.codespace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEndBlock::kValidatorUpdatesFieldNumber;
const int ResponseEndBlock::kConsensusParamUpdatesFieldNumber;
const int ResponseEndBlock::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEndBlock::ResponseEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseEndBlock)
}
ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      validator_updates_(from.validator_updates_),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consensus_param_updates()) {
    consensus_param_updates_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_param_updates_);
  } else {
    consensus_param_updates_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseEndBlock)
}

void ResponseEndBlock::SharedCtor() {
  consensus_param_updates_ = NULL;
  _cached_size_ = 0;
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseEndBlock)
  SharedDtor();
}

void ResponseEndBlock::SharedDtor() {
  if (this != internal_default_instance()) {
    delete consensus_param_updates_;
  }
}

void ResponseEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEndBlock::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[28].descriptor;
}

const ResponseEndBlock& ResponseEndBlock::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseEndBlock* ResponseEndBlock::New(::google::protobuf::Arena* arena) const {
  ResponseEndBlock* n = new ResponseEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseEndBlock)
  validator_updates_.Clear();
  tags_.Clear();
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) {
    delete consensus_param_updates_;
  }
  consensus_param_updates_ = NULL;
}

bool ResponseEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validator_updates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_param_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseEndBlock)
  return false;
#undef DO_
}

void ResponseEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseEndBlock)
  // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
  for (unsigned int i = 0, n = this->validator_updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->validator_updates(i), output);
  }

  // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->consensus_param_updates_, output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 3;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseEndBlock)
}

::google::protobuf::uint8* ResponseEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseEndBlock)
  // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
  for (unsigned int i = 0, n = this->validator_updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->validator_updates(i), false, target);
  }

  // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->consensus_param_updates_, false, target);
  }

  // repeated .suil.tmsp.types.KVPair tags = 3;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tags(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseEndBlock)
  return target;
}

size_t ResponseEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseEndBlock)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
  {
    unsigned int count = this->validator_updates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->validator_updates(i));
    }
  }

  // repeated .suil.tmsp.types.KVPair tags = 3;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_param_updates_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEndBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseEndBlock)
    MergeFrom(*source);
  }
}

void ResponseEndBlock::MergeFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  validator_updates_.MergeFrom(from.validator_updates_);
  tags_.MergeFrom(from.tags_);
  if (from.has_consensus_param_updates()) {
    mutable_consensus_param_updates()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_param_updates());
  }
}

void ResponseEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {
  return true;
}

void ResponseEndBlock::Swap(ResponseEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  validator_updates_.UnsafeArenaSwap(&other->validator_updates_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(consensus_param_updates_, other->consensus_param_updates_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEndBlock::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEndBlock

// repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
int ResponseEndBlock::validator_updates_size() const {
  return validator_updates_.size();
}
void ResponseEndBlock::clear_validator_updates() {
  validator_updates_.Clear();
}
const ::suil::tmsp::types::ValidatorUpdate& ResponseEndBlock::validator_updates(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseEndBlock.validator_updates)
  return validator_updates_.Get(index);
}
::suil::tmsp::types::ValidatorUpdate* ResponseEndBlock::mutable_validator_updates(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseEndBlock.validator_updates)
  return validator_updates_.Mutable(index);
}
::suil::tmsp::types::ValidatorUpdate* ResponseEndBlock::add_validator_updates() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseEndBlock.validator_updates)
  return validator_updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >*
ResponseEndBlock::mutable_validator_updates() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseEndBlock.validator_updates)
  return &validator_updates_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::ValidatorUpdate >&
ResponseEndBlock::validator_updates() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseEndBlock.validator_updates)
  return validator_updates_;
}

// .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
bool ResponseEndBlock::has_consensus_param_updates() const {
  return this != internal_default_instance() && consensus_param_updates_ != NULL;
}
void ResponseEndBlock::clear_consensus_param_updates() {
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) delete consensus_param_updates_;
  consensus_param_updates_ = NULL;
}
const ::suil::tmsp::types::ConsensusParams& ResponseEndBlock::consensus_param_updates() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_ != NULL ? *consensus_param_updates_
                         : *::suil::tmsp::types::ConsensusParams::internal_default_instance();
}
::suil::tmsp::types::ConsensusParams* ResponseEndBlock::mutable_consensus_param_updates() {
  
  if (consensus_param_updates_ == NULL) {
    consensus_param_updates_ = new ::suil::tmsp::types::ConsensusParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_;
}
::suil::tmsp::types::ConsensusParams* ResponseEndBlock::release_consensus_param_updates() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseEndBlock.consensus_param_updates)
  
  ::suil::tmsp::types::ConsensusParams* temp = consensus_param_updates_;
  consensus_param_updates_ = NULL;
  return temp;
}
void ResponseEndBlock::set_allocated_consensus_param_updates(::suil::tmsp::types::ConsensusParams* consensus_param_updates) {
  delete consensus_param_updates_;
  consensus_param_updates_ = consensus_param_updates;
  if (consensus_param_updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseEndBlock.consensus_param_updates)
}

// repeated .suil.tmsp.types.KVPair tags = 3;
int ResponseEndBlock::tags_size() const {
  return tags_.size();
}
void ResponseEndBlock::clear_tags() {
  tags_.Clear();
}
const ::suil::tmsp::types::KVPair& ResponseEndBlock::tags(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseEndBlock.tags)
  return tags_.Get(index);
}
::suil::tmsp::types::KVPair* ResponseEndBlock::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseEndBlock.tags)
  return tags_.Mutable(index);
}
::suil::tmsp::types::KVPair* ResponseEndBlock::add_tags() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ResponseEndBlock.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >*
ResponseEndBlock::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ResponseEndBlock.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::KVPair >&
ResponseEndBlock::tags() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ResponseEndBlock.tags)
  return tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCommit::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCommit::ResponseCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseCommit)
}
ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseCommit)
}

void ResponseCommit::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseCommit)
  SharedDtor();
}

void ResponseCommit::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCommit::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[29].descriptor;
}

const ResponseCommit& ResponseCommit::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseCommit* ResponseCommit::New(::google::protobuf::Arena* arena) const {
  ResponseCommit* n = new ResponseCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseCommit)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseCommit)
  return false;
#undef DO_
}

void ResponseCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseCommit)
  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseCommit)
}

::google::protobuf::uint8* ResponseCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ResponseCommit)
  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ResponseCommit)
  return target;
}

size_t ResponseCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseCommit)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ResponseCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ResponseCommit)
    MergeFrom(*source);
  }
}

void ResponseCommit::MergeFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ResponseCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {
  return true;
}

void ResponseCommit::Swap(ResponseCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCommit::InternalSwap(ResponseCommit* other) {
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCommit::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCommit

// bytes data = 2;
void ResponseCommit::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseCommit::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ResponseCommit.data)
  return data_.GetNoArena();
}
void ResponseCommit::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ResponseCommit.data)
}
#if LANG_CXX11
void ResponseCommit::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.ResponseCommit.data)
}
#endif
void ResponseCommit::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ResponseCommit.data)
}
void ResponseCommit::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ResponseCommit.data)
}
::std::string* ResponseCommit::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ResponseCommit.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseCommit::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ResponseCommit.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseCommit::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ResponseCommit.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusParams::kBlockSizeFieldNumber;
const int ConsensusParams::kEvidenceFieldNumber;
const int ConsensusParams::kValidatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusParams::ConsensusParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_size()) {
    block_size_ = new ::suil::tmsp::types::BlockSizeParams(*from.block_size_);
  } else {
    block_size_ = NULL;
  }
  if (from.has_evidence()) {
    evidence_ = new ::suil::tmsp::types::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = NULL;
  }
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::ValidatorParams(*from.validator_);
  } else {
    validator_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
  ::memset(&block_size_, 0, reinterpret_cast<char*>(&validator_) -
    reinterpret_cast<char*>(&block_size_) + sizeof(validator_));
  _cached_size_ = 0;
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ConsensusParams)
  SharedDtor();
}

void ConsensusParams::SharedDtor() {
  if (this != internal_default_instance()) {
    delete block_size_;
  }
  if (this != internal_default_instance()) {
    delete evidence_;
  }
  if (this != internal_default_instance()) {
    delete validator_;
  }
}

void ConsensusParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusParams::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[30].descriptor;
}

const ConsensusParams& ConsensusParams::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusParams* ConsensusParams::New(::google::protobuf::Arena* arena) const {
  ConsensusParams* n = new ConsensusParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ConsensusParams)
  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) {
    delete block_size_;
  }
  block_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && evidence_ != NULL) {
    delete evidence_;
  }
  evidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) {
    delete validator_;
  }
  validator_ = NULL;
}

bool ConsensusParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ConsensusParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.BlockSizeParams block_size = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.EvidenceParams evidence = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ValidatorParams validator = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ConsensusParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ConsensusParams)
  return false;
#undef DO_
}

void ConsensusParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ConsensusParams)
  // .suil.tmsp.types.BlockSizeParams block_size = 1;
  if (this->has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->block_size_, output);
  }

  // .suil.tmsp.types.EvidenceParams evidence = 2;
  if (this->has_evidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->evidence_, output);
  }

  // .suil.tmsp.types.ValidatorParams validator = 3;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->validator_, output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ConsensusParams)
}

::google::protobuf::uint8* ConsensusParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ConsensusParams)
  // .suil.tmsp.types.BlockSizeParams block_size = 1;
  if (this->has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->block_size_, false, target);
  }

  // .suil.tmsp.types.EvidenceParams evidence = 2;
  if (this->has_evidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->evidence_, false, target);
  }

  // .suil.tmsp.types.ValidatorParams validator = 3;
  if (this->has_validator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->validator_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ConsensusParams)
  size_t total_size = 0;

  // .suil.tmsp.types.BlockSizeParams block_size = 1;
  if (this->has_block_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_size_);
  }

  // .suil.tmsp.types.EvidenceParams evidence = 2;
  if (this->has_evidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->evidence_);
  }

  // .suil.tmsp.types.ValidatorParams validator = 3;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validator_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ConsensusParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ConsensusParams)
    MergeFrom(*source);
  }
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_size()) {
    mutable_block_size()->::suil::tmsp::types::BlockSizeParams::MergeFrom(from.block_size());
  }
  if (from.has_evidence()) {
    mutable_evidence()->::suil::tmsp::types::EvidenceParams::MergeFrom(from.evidence());
  }
  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::ValidatorParams::MergeFrom(from.validator());
  }
}

void ConsensusParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::Swap(ConsensusParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusParams::InternalSwap(ConsensusParams* other) {
  std::swap(block_size_, other->block_size_);
  std::swap(evidence_, other->evidence_);
  std::swap(validator_, other->validator_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusParams::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusParams

// .suil.tmsp.types.BlockSizeParams block_size = 1;
bool ConsensusParams::has_block_size() const {
  return this != internal_default_instance() && block_size_ != NULL;
}
void ConsensusParams::clear_block_size() {
  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) delete block_size_;
  block_size_ = NULL;
}
const ::suil::tmsp::types::BlockSizeParams& ConsensusParams::block_size() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ConsensusParams.block_size)
  return block_size_ != NULL ? *block_size_
                         : *::suil::tmsp::types::BlockSizeParams::internal_default_instance();
}
::suil::tmsp::types::BlockSizeParams* ConsensusParams::mutable_block_size() {
  
  if (block_size_ == NULL) {
    block_size_ = new ::suil::tmsp::types::BlockSizeParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ConsensusParams.block_size)
  return block_size_;
}
::suil::tmsp::types::BlockSizeParams* ConsensusParams::release_block_size() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ConsensusParams.block_size)
  
  ::suil::tmsp::types::BlockSizeParams* temp = block_size_;
  block_size_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_block_size(::suil::tmsp::types::BlockSizeParams* block_size) {
  delete block_size_;
  block_size_ = block_size;
  if (block_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ConsensusParams.block_size)
}

// .suil.tmsp.types.EvidenceParams evidence = 2;
bool ConsensusParams::has_evidence() const {
  return this != internal_default_instance() && evidence_ != NULL;
}
void ConsensusParams::clear_evidence() {
  if (GetArenaNoVirtual() == NULL && evidence_ != NULL) delete evidence_;
  evidence_ = NULL;
}
const ::suil::tmsp::types::EvidenceParams& ConsensusParams::evidence() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ConsensusParams.evidence)
  return evidence_ != NULL ? *evidence_
                         : *::suil::tmsp::types::EvidenceParams::internal_default_instance();
}
::suil::tmsp::types::EvidenceParams* ConsensusParams::mutable_evidence() {
  
  if (evidence_ == NULL) {
    evidence_ = new ::suil::tmsp::types::EvidenceParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ConsensusParams.evidence)
  return evidence_;
}
::suil::tmsp::types::EvidenceParams* ConsensusParams::release_evidence() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ConsensusParams.evidence)
  
  ::suil::tmsp::types::EvidenceParams* temp = evidence_;
  evidence_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_evidence(::suil::tmsp::types::EvidenceParams* evidence) {
  delete evidence_;
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ConsensusParams.evidence)
}

// .suil.tmsp.types.ValidatorParams validator = 3;
bool ConsensusParams::has_validator() const {
  return this != internal_default_instance() && validator_ != NULL;
}
void ConsensusParams::clear_validator() {
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) delete validator_;
  validator_ = NULL;
}
const ::suil::tmsp::types::ValidatorParams& ConsensusParams::validator() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ConsensusParams.validator)
  return validator_ != NULL ? *validator_
                         : *::suil::tmsp::types::ValidatorParams::internal_default_instance();
}
::suil::tmsp::types::ValidatorParams* ConsensusParams::mutable_validator() {
  
  if (validator_ == NULL) {
    validator_ = new ::suil::tmsp::types::ValidatorParams;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ConsensusParams.validator)
  return validator_;
}
::suil::tmsp::types::ValidatorParams* ConsensusParams::release_validator() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ConsensusParams.validator)
  
  ::suil::tmsp::types::ValidatorParams* temp = validator_;
  validator_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_validator(::suil::tmsp::types::ValidatorParams* validator) {
  delete validator_;
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ConsensusParams.validator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockSizeParams::kMaxBytesFieldNumber;
const int BlockSizeParams::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockSizeParams::BlockSizeParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.BlockSizeParams)
}
BlockSizeParams::BlockSizeParams(const BlockSizeParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_) + sizeof(max_gas_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.BlockSizeParams)
}

void BlockSizeParams::SharedCtor() {
  ::memset(&max_bytes_, 0, reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_) + sizeof(max_gas_));
  _cached_size_ = 0;
}

BlockSizeParams::~BlockSizeParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.BlockSizeParams)
  SharedDtor();
}

void BlockSizeParams::SharedDtor() {
}

void BlockSizeParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockSizeParams::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[31].descriptor;
}

const BlockSizeParams& BlockSizeParams::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockSizeParams* BlockSizeParams::New(::google::protobuf::Arena* arena) const {
  BlockSizeParams* n = new BlockSizeParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockSizeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.BlockSizeParams)
  ::memset(&max_bytes_, 0, reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_) + sizeof(max_gas_));
}

bool BlockSizeParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.BlockSizeParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_bytes = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_gas = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.BlockSizeParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.BlockSizeParams)
  return false;
#undef DO_
}

void BlockSizeParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.BlockSizeParams)
  // int64 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_bytes(), output);
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_gas(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.BlockSizeParams)
}

::google::protobuf::uint8* BlockSizeParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.BlockSizeParams)
  // int64 max_bytes = 1;
  if (this->max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_bytes(), target);
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_gas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.BlockSizeParams)
  return target;
}

size_t BlockSizeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.BlockSizeParams)
  size_t total_size = 0;

  // int64 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_bytes());
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockSizeParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.BlockSizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockSizeParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockSizeParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.BlockSizeParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.BlockSizeParams)
    MergeFrom(*source);
  }
}

void BlockSizeParams::MergeFrom(const BlockSizeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.BlockSizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
}

void BlockSizeParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.BlockSizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockSizeParams::CopyFrom(const BlockSizeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.BlockSizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSizeParams::IsInitialized() const {
  return true;
}

void BlockSizeParams::Swap(BlockSizeParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockSizeParams::InternalSwap(BlockSizeParams* other) {
  std::swap(max_bytes_, other->max_bytes_);
  std::swap(max_gas_, other->max_gas_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockSizeParams::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockSizeParams

// int64 max_bytes = 1;
void BlockSizeParams::clear_max_bytes() {
  max_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BlockSizeParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.BlockSizeParams.max_bytes)
  return max_bytes_;
}
void BlockSizeParams::set_max_bytes(::google::protobuf::int64 value) {
  
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.BlockSizeParams.max_bytes)
}

// int64 max_gas = 2;
void BlockSizeParams::clear_max_gas() {
  max_gas_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BlockSizeParams::max_gas() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.BlockSizeParams.max_gas)
  return max_gas_;
}
void BlockSizeParams::set_max_gas(::google::protobuf::int64 value) {
  
  max_gas_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.BlockSizeParams.max_gas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvidenceParams::kMaxAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvidenceParams::EvidenceParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_age_ = from.max_age_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.EvidenceParams)
}

void EvidenceParams::SharedCtor() {
  max_age_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.EvidenceParams)
  SharedDtor();
}

void EvidenceParams::SharedDtor() {
}

void EvidenceParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvidenceParams::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[32].descriptor;
}

const EvidenceParams& EvidenceParams::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

EvidenceParams* EvidenceParams::New(::google::protobuf::Arena* arena) const {
  EvidenceParams* n = new EvidenceParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.EvidenceParams)
  max_age_ = GOOGLE_LONGLONG(0);
}

bool EvidenceParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.EvidenceParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_age = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.EvidenceParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.EvidenceParams)
  return false;
#undef DO_
}

void EvidenceParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.EvidenceParams)
  // int64 max_age = 1;
  if (this->max_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_age(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.EvidenceParams)
}

::google::protobuf::uint8* EvidenceParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.EvidenceParams)
  // int64 max_age = 1;
  if (this->max_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_age(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.EvidenceParams)
  return target;
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.EvidenceParams)
  size_t total_size = 0;

  // int64 max_age = 1;
  if (this->max_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvidenceParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const EvidenceParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvidenceParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.EvidenceParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.EvidenceParams)
    MergeFrom(*source);
  }
}

void EvidenceParams::MergeFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.max_age() != 0) {
    set_max_age(from.max_age());
  }
}

void EvidenceParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::Swap(EvidenceParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvidenceParams::InternalSwap(EvidenceParams* other) {
  std::swap(max_age_, other->max_age_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvidenceParams::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvidenceParams

// int64 max_age = 1;
void EvidenceParams::clear_max_age() {
  max_age_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EvidenceParams::max_age() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.EvidenceParams.max_age)
  return max_age_;
}
void EvidenceParams::set_max_age(::google::protobuf::int64 value) {
  
  max_age_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.EvidenceParams.max_age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidatorParams::kPubKeyTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidatorParams::ValidatorParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pub_key_types_(from.pub_key_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ValidatorParams)
}

void ValidatorParams::SharedCtor() {
  _cached_size_ = 0;
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ValidatorParams)
  SharedDtor();
}

void ValidatorParams::SharedDtor() {
}

void ValidatorParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidatorParams::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[33].descriptor;
}

const ValidatorParams& ValidatorParams::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValidatorParams* ValidatorParams::New(::google::protobuf::Arena* arena) const {
  ValidatorParams* n = new ValidatorParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ValidatorParams)
  pub_key_types_.Clear();
}

bool ValidatorParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ValidatorParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pub_key_types = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pub_key_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_key_types(this->pub_key_types_size() - 1).data(),
            this->pub_key_types(this->pub_key_types_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ValidatorParams.pub_key_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ValidatorParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ValidatorParams)
  return false;
#undef DO_
}

void ValidatorParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ValidatorParams)
  // repeated string pub_key_types = 1;
  for (int i = 0; i < this->pub_key_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key_types(i).data(), this->pub_key_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ValidatorParams.pub_key_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pub_key_types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ValidatorParams)
}

::google::protobuf::uint8* ValidatorParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ValidatorParams)
  // repeated string pub_key_types = 1;
  for (int i = 0; i < this->pub_key_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key_types(i).data(), this->pub_key_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ValidatorParams.pub_key_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pub_key_types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ValidatorParams)
  return target;
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ValidatorParams)
  size_t total_size = 0;

  // repeated string pub_key_types = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pub_key_types_size());
  for (int i = 0; i < this->pub_key_types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pub_key_types(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidatorParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidatorParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ValidatorParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ValidatorParams)
    MergeFrom(*source);
  }
}

void ValidatorParams::MergeFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_types_.MergeFrom(from.pub_key_types_);
}

void ValidatorParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::Swap(ValidatorParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidatorParams::InternalSwap(ValidatorParams* other) {
  pub_key_types_.UnsafeArenaSwap(&other->pub_key_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidatorParams::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidatorParams

// repeated string pub_key_types = 1;
int ValidatorParams::pub_key_types_size() const {
  return pub_key_types_.size();
}
void ValidatorParams::clear_pub_key_types() {
  pub_key_types_.Clear();
}
const ::std::string& ValidatorParams::pub_key_types(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ValidatorParams.pub_key_types)
  return pub_key_types_.Get(index);
}
::std::string* ValidatorParams::mutable_pub_key_types(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ValidatorParams.pub_key_types)
  return pub_key_types_.Mutable(index);
}
void ValidatorParams::set_pub_key_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ValidatorParams.pub_key_types)
  pub_key_types_.Mutable(index)->assign(value);
}
void ValidatorParams::set_pub_key_types(int index, const char* value) {
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.ValidatorParams.pub_key_types)
}
void ValidatorParams::set_pub_key_types(int index, const char* value, size_t size) {
  pub_key_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.ValidatorParams.pub_key_types)
}
::std::string* ValidatorParams::add_pub_key_types() {
  // @@protoc_insertion_point(field_add_mutable:suil.tmsp.types.ValidatorParams.pub_key_types)
  return pub_key_types_.Add();
}
void ValidatorParams::add_pub_key_types(const ::std::string& value) {
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:suil.tmsp.types.ValidatorParams.pub_key_types)
}
void ValidatorParams::add_pub_key_types(const char* value) {
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:suil.tmsp.types.ValidatorParams.pub_key_types)
}
void ValidatorParams::add_pub_key_types(const char* value, size_t size) {
  pub_key_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:suil.tmsp.types.ValidatorParams.pub_key_types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ValidatorParams::pub_key_types() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.ValidatorParams.pub_key_types)
  return pub_key_types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ValidatorParams::mutable_pub_key_types() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.ValidatorParams.pub_key_types)
  return &pub_key_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastCommitInfo::kRoundFieldNumber;
const int LastCommitInfo::kVotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastCommitInfo::LastCommitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.LastCommitInfo)
}
LastCommitInfo::LastCommitInfo(const LastCommitInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      votes_(from.votes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.LastCommitInfo)
}

void LastCommitInfo::SharedCtor() {
  round_ = 0;
  _cached_size_ = 0;
}

LastCommitInfo::~LastCommitInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.LastCommitInfo)
  SharedDtor();
}

void LastCommitInfo::SharedDtor() {
}

void LastCommitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastCommitInfo::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[34].descriptor;
}

const LastCommitInfo& LastCommitInfo::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

LastCommitInfo* LastCommitInfo::New(::google::protobuf::Arena* arena) const {
  LastCommitInfo* n = new LastCommitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LastCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.LastCommitInfo)
  votes_.Clear();
  round_ = 0;
}

bool LastCommitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.LastCommitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 round = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.VoteInfo votes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.LastCommitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.LastCommitInfo)
  return false;
#undef DO_
}

void LastCommitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.LastCommitInfo)
  // int32 round = 1;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // repeated .suil.tmsp.types.VoteInfo votes = 2;
  for (unsigned int i = 0, n = this->votes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->votes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.LastCommitInfo)
}

::google::protobuf::uint8* LastCommitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.LastCommitInfo)
  // int32 round = 1;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // repeated .suil.tmsp.types.VoteInfo votes = 2;
  for (unsigned int i = 0, n = this->votes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->votes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.LastCommitInfo)
  return target;
}

size_t LastCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.LastCommitInfo)
  size_t total_size = 0;

  // repeated .suil.tmsp.types.VoteInfo votes = 2;
  {
    unsigned int count = this->votes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->votes(i));
    }
  }

  // int32 round = 1;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastCommitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LastCommitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LastCommitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.LastCommitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.LastCommitInfo)
    MergeFrom(*source);
  }
}

void LastCommitInfo::MergeFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  votes_.MergeFrom(from.votes_);
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void LastCommitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastCommitInfo::CopyFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastCommitInfo::IsInitialized() const {
  return true;
}

void LastCommitInfo::Swap(LastCommitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastCommitInfo::InternalSwap(LastCommitInfo* other) {
  votes_.UnsafeArenaSwap(&other->votes_);
  std::swap(round_, other->round_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LastCommitInfo::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LastCommitInfo

// int32 round = 1;
void LastCommitInfo::clear_round() {
  round_ = 0;
}
::google::protobuf::int32 LastCommitInfo::round() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.LastCommitInfo.round)
  return round_;
}
void LastCommitInfo::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.LastCommitInfo.round)
}

// repeated .suil.tmsp.types.VoteInfo votes = 2;
int LastCommitInfo::votes_size() const {
  return votes_.size();
}
void LastCommitInfo::clear_votes() {
  votes_.Clear();
}
const ::suil::tmsp::types::VoteInfo& LastCommitInfo::votes(int index) const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.LastCommitInfo.votes)
  return votes_.Get(index);
}
::suil::tmsp::types::VoteInfo* LastCommitInfo::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.LastCommitInfo.votes)
  return votes_.Mutable(index);
}
::suil::tmsp::types::VoteInfo* LastCommitInfo::add_votes() {
  // @@protoc_insertion_point(field_add:suil.tmsp.types.LastCommitInfo.votes)
  return votes_.Add();
}
::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::VoteInfo >*
LastCommitInfo::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:suil.tmsp.types.LastCommitInfo.votes)
  return &votes_;
}
const ::google::protobuf::RepeatedPtrField< ::suil::tmsp::types::VoteInfo >&
LastCommitInfo::votes() const {
  // @@protoc_insertion_point(field_list:suil.tmsp.types.LastCommitInfo.votes)
  return votes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kChainIdFieldNumber;
const int Header::kHeightFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kNumTxsFieldNumber;
const int Header::kTotalTxsFieldNumber;
const int Header::kLastBlockIdFieldNumber;
const int Header::kLastCommitHashFieldNumber;
const int Header::kDataHashFieldNumber;
const int Header::kValidatorsHashFieldNumber;
const int Header::kNextValidatorsHashFieldNumber;
const int Header::kConsensusHashFieldNumber;
const int Header::kAppHashFieldNumber;
const int Header::kLastResultsHashFieldNumber;
const int Header::kEvidenceHashFieldNumber;
const int Header::kProposerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_commit_hash().size() > 0) {
    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_hash().size() > 0) {
    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.validators_hash().size() > 0) {
    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  next_validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_validators_hash().size() > 0) {
    next_validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_validators_hash_);
  }
  consensus_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consensus_hash().size() > 0) {
    consensus_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consensus_hash_);
  }
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_hash().size() > 0) {
    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  last_results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_results_hash().size() > 0) {
    last_results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_results_hash_);
  }
  evidence_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.evidence_hash().size() > 0) {
    evidence_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evidence_hash_);
  }
  proposer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposer_address().size() > 0) {
    proposer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.has_version()) {
    version_ = new ::suil::tmsp::types::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_last_block_id()) {
    last_block_id_ = new ::suil::tmsp::types::BlockID(*from.last_block_id_);
  } else {
    last_block_id_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&total_txs_) -
    reinterpret_cast<char*>(&height_) + sizeof(total_txs_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Header)
}

void Header::SharedCtor() {
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&total_txs_) -
    reinterpret_cast<char*>(&version_) + sizeof(total_txs_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete version_;
  }
  if (this != internal_default_instance()) {
    delete time_;
  }
  if (this != internal_default_instance()) {
    delete last_block_id_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[35].descriptor;
}

const Header& Header::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Header)
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) {
    delete last_block_id_;
  }
  last_block_id_ = NULL;
  ::memset(&height_, 0, reinterpret_cast<char*>(&total_txs_) -
    reinterpret_cast<char*>(&height_) + sizeof(total_txs_));
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Version version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_txs = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_txs = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.BlockID last_block_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_commit_hash = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_commit_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data_hash = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes validators_hash = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_validators_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes next_validators_hash = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next_validators_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes consensus_hash = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_consensus_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes app_hash = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_results_hash = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_results_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes evidence_hash = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evidence_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proposer_address = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Header)
  // .suil.tmsp.types.Version version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Header.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->time_, output);
  }

  // int64 num_txs = 5;
  if (this->num_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_txs(), output);
  }

  // int64 total_txs = 6;
  if (this->total_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_txs(), output);
  }

  // .suil.tmsp.types.BlockID last_block_id = 7;
  if (this->has_last_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->last_block_id_, output);
  }

  // bytes last_commit_hash = 8;
  if (this->last_commit_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->last_commit_hash(), output);
  }

  // bytes data_hash = 9;
  if (this->data_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data_hash(), output);
  }

  // bytes validators_hash = 10;
  if (this->validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->validators_hash(), output);
  }

  // bytes next_validators_hash = 11;
  if (this->next_validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->next_validators_hash(), output);
  }

  // bytes consensus_hash = 12;
  if (this->consensus_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->consensus_hash(), output);
  }

  // bytes app_hash = 13;
  if (this->app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->app_hash(), output);
  }

  // bytes last_results_hash = 14;
  if (this->last_results_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->last_results_hash(), output);
  }

  // bytes evidence_hash = 15;
  if (this->evidence_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->evidence_hash(), output);
  }

  // bytes proposer_address = 16;
  if (this->proposer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->proposer_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Header)
  // .suil.tmsp.types.Version version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->version_, false, target);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Header.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chain_id(), target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->height(), target);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->time_, false, target);
  }

  // int64 num_txs = 5;
  if (this->num_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num_txs(), target);
  }

  // int64 total_txs = 6;
  if (this->total_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_txs(), target);
  }

  // .suil.tmsp.types.BlockID last_block_id = 7;
  if (this->has_last_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->last_block_id_, false, target);
  }

  // bytes last_commit_hash = 8;
  if (this->last_commit_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->last_commit_hash(), target);
  }

  // bytes data_hash = 9;
  if (this->data_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data_hash(), target);
  }

  // bytes validators_hash = 10;
  if (this->validators_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->validators_hash(), target);
  }

  // bytes next_validators_hash = 11;
  if (this->next_validators_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->next_validators_hash(), target);
  }

  // bytes consensus_hash = 12;
  if (this->consensus_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->consensus_hash(), target);
  }

  // bytes app_hash = 13;
  if (this->app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->app_hash(), target);
  }

  // bytes last_results_hash = 14;
  if (this->last_results_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->last_results_hash(), target);
  }

  // bytes evidence_hash = 15;
  if (this->evidence_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->evidence_hash(), target);
  }

  // bytes proposer_address = 16;
  if (this->proposer_address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->proposer_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Header)
  size_t total_size = 0;

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // bytes last_commit_hash = 8;
  if (this->last_commit_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_commit_hash());
  }

  // bytes data_hash = 9;
  if (this->data_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_hash());
  }

  // bytes validators_hash = 10;
  if (this->validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validators_hash());
  }

  // bytes next_validators_hash = 11;
  if (this->next_validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_validators_hash());
  }

  // bytes consensus_hash = 12;
  if (this->consensus_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->consensus_hash());
  }

  // bytes app_hash = 13;
  if (this->app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_hash());
  }

  // bytes last_results_hash = 14;
  if (this->last_results_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_results_hash());
  }

  // bytes evidence_hash = 15;
  if (this->evidence_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->evidence_hash());
  }

  // bytes proposer_address = 16;
  if (this->proposer_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proposer_address());
  }

  // .suil.tmsp.types.Version version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // .suil.tmsp.types.BlockID last_block_id = 7;
  if (this->has_last_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_block_id_);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 num_txs = 5;
  if (this->num_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_txs());
  }

  // int64 total_txs = 6;
  if (this->total_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_txs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.last_commit_hash().size() > 0) {

    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  if (from.data_hash().size() > 0) {

    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  if (from.validators_hash().size() > 0) {

    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  if (from.next_validators_hash().size() > 0) {

    next_validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_validators_hash_);
  }
  if (from.consensus_hash().size() > 0) {

    consensus_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consensus_hash_);
  }
  if (from.app_hash().size() > 0) {

    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  if (from.last_results_hash().size() > 0) {

    last_results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_results_hash_);
  }
  if (from.evidence_hash().size() > 0) {

    evidence_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evidence_hash_);
  }
  if (from.proposer_address().size() > 0) {

    proposer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.has_version()) {
    mutable_version()->::suil::tmsp::types::Version::MergeFrom(from.version());
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.has_last_block_id()) {
    mutable_last_block_id()->::suil::tmsp::types::BlockID::MergeFrom(from.last_block_id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.num_txs() != 0) {
    set_num_txs(from.num_txs());
  }
  if (from.total_txs() != 0) {
    set_total_txs(from.total_txs());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  chain_id_.Swap(&other->chain_id_);
  last_commit_hash_.Swap(&other->last_commit_hash_);
  data_hash_.Swap(&other->data_hash_);
  validators_hash_.Swap(&other->validators_hash_);
  next_validators_hash_.Swap(&other->next_validators_hash_);
  consensus_hash_.Swap(&other->consensus_hash_);
  app_hash_.Swap(&other->app_hash_);
  last_results_hash_.Swap(&other->last_results_hash_);
  evidence_hash_.Swap(&other->evidence_hash_);
  proposer_address_.Swap(&other->proposer_address_);
  std::swap(version_, other->version_);
  std::swap(time_, other->time_);
  std::swap(last_block_id_, other->last_block_id_);
  std::swap(height_, other->height_);
  std::swap(num_txs_, other->num_txs_);
  std::swap(total_txs_, other->total_txs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// .suil.tmsp.types.Version version = 1;
bool Header::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
void Header::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::suil::tmsp::types::Version& Header::version() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.version)
  return version_ != NULL ? *version_
                         : *::suil::tmsp::types::Version::internal_default_instance();
}
::suil::tmsp::types::Version* Header::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::suil::tmsp::types::Version;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.version)
  return version_;
}
::suil::tmsp::types::Version* Header::release_version() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.version)
  
  ::suil::tmsp::types::Version* temp = version_;
  version_ = NULL;
  return temp;
}
void Header::set_allocated_version(::suil::tmsp::types::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.version)
}

// string chain_id = 2;
void Header::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::chain_id() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.chain_id)
  return chain_id_.GetNoArena();
}
void Header::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.chain_id)
}
#if LANG_CXX11
void Header::set_chain_id(::std::string&& value) {
  
  chain_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.chain_id)
}
#endif
void Header::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.chain_id)
}
void Header::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.chain_id)
}
::std::string* Header::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_chain_id() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.chain_id)
}

// int64 height = 3;
void Header::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Header::height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.height)
  return height_;
}
void Header::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.height)
}

// .suil.tmsp.types.Timestamp time = 4;
bool Header::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
void Header::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::suil::tmsp::types::Timestamp& Header::time() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.time)
  return time_ != NULL ? *time_
                         : *::suil::tmsp::types::Timestamp::internal_default_instance();
}
::suil::tmsp::types::Timestamp* Header::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::suil::tmsp::types::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.time)
  return time_;
}
::suil::tmsp::types::Timestamp* Header::release_time() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.time)
  
  ::suil::tmsp::types::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void Header::set_allocated_time(::suil::tmsp::types::Timestamp* time) {
  delete time_;
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.time)
}

// int64 num_txs = 5;
void Header::clear_num_txs() {
  num_txs_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Header::num_txs() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.num_txs)
  return num_txs_;
}
void Header::set_num_txs(::google::protobuf::int64 value) {
  
  num_txs_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.num_txs)
}

// int64 total_txs = 6;
void Header::clear_total_txs() {
  total_txs_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Header::total_txs() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.total_txs)
  return total_txs_;
}
void Header::set_total_txs(::google::protobuf::int64 value) {
  
  total_txs_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.total_txs)
}

// .suil.tmsp.types.BlockID last_block_id = 7;
bool Header::has_last_block_id() const {
  return this != internal_default_instance() && last_block_id_ != NULL;
}
void Header::clear_last_block_id() {
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) delete last_block_id_;
  last_block_id_ = NULL;
}
const ::suil::tmsp::types::BlockID& Header::last_block_id() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.last_block_id)
  return last_block_id_ != NULL ? *last_block_id_
                         : *::suil::tmsp::types::BlockID::internal_default_instance();
}
::suil::tmsp::types::BlockID* Header::mutable_last_block_id() {
  
  if (last_block_id_ == NULL) {
    last_block_id_ = new ::suil::tmsp::types::BlockID;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.last_block_id)
  return last_block_id_;
}
::suil::tmsp::types::BlockID* Header::release_last_block_id() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.last_block_id)
  
  ::suil::tmsp::types::BlockID* temp = last_block_id_;
  last_block_id_ = NULL;
  return temp;
}
void Header::set_allocated_last_block_id(::suil::tmsp::types::BlockID* last_block_id) {
  delete last_block_id_;
  last_block_id_ = last_block_id;
  if (last_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.last_block_id)
}

// bytes last_commit_hash = 8;
void Header::clear_last_commit_hash() {
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::last_commit_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.last_commit_hash)
  return last_commit_hash_.GetNoArena();
}
void Header::set_last_commit_hash(const ::std::string& value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.last_commit_hash)
}
#if LANG_CXX11
void Header::set_last_commit_hash(::std::string&& value) {
  
  last_commit_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.last_commit_hash)
}
#endif
void Header::set_last_commit_hash(const char* value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.last_commit_hash)
}
void Header::set_last_commit_hash(const void* value, size_t size) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.last_commit_hash)
}
::std::string* Header::mutable_last_commit_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.last_commit_hash)
  return last_commit_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_last_commit_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.last_commit_hash)
  
  return last_commit_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_last_commit_hash(::std::string* last_commit_hash) {
  if (last_commit_hash != NULL) {
    
  } else {
    
  }
  last_commit_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_commit_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.last_commit_hash)
}

// bytes data_hash = 9;
void Header::clear_data_hash() {
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::data_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.data_hash)
  return data_hash_.GetNoArena();
}
void Header::set_data_hash(const ::std::string& value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.data_hash)
}
#if LANG_CXX11
void Header::set_data_hash(::std::string&& value) {
  
  data_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.data_hash)
}
#endif
void Header::set_data_hash(const char* value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.data_hash)
}
void Header::set_data_hash(const void* value, size_t size) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.data_hash)
}
::std::string* Header::mutable_data_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.data_hash)
  return data_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_data_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.data_hash)
  
  return data_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_data_hash(::std::string* data_hash) {
  if (data_hash != NULL) {
    
  } else {
    
  }
  data_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.data_hash)
}

// bytes validators_hash = 10;
void Header::clear_validators_hash() {
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::validators_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.validators_hash)
  return validators_hash_.GetNoArena();
}
void Header::set_validators_hash(const ::std::string& value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.validators_hash)
}
#if LANG_CXX11
void Header::set_validators_hash(::std::string&& value) {
  
  validators_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.validators_hash)
}
#endif
void Header::set_validators_hash(const char* value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.validators_hash)
}
void Header::set_validators_hash(const void* value, size_t size) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.validators_hash)
}
::std::string* Header::mutable_validators_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.validators_hash)
  return validators_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_validators_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.validators_hash)
  
  return validators_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_validators_hash(::std::string* validators_hash) {
  if (validators_hash != NULL) {
    
  } else {
    
  }
  validators_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validators_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.validators_hash)
}

// bytes next_validators_hash = 11;
void Header::clear_next_validators_hash() {
  next_validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::next_validators_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.next_validators_hash)
  return next_validators_hash_.GetNoArena();
}
void Header::set_next_validators_hash(const ::std::string& value) {
  
  next_validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.next_validators_hash)
}
#if LANG_CXX11
void Header::set_next_validators_hash(::std::string&& value) {
  
  next_validators_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.next_validators_hash)
}
#endif
void Header::set_next_validators_hash(const char* value) {
  
  next_validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.next_validators_hash)
}
void Header::set_next_validators_hash(const void* value, size_t size) {
  
  next_validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.next_validators_hash)
}
::std::string* Header::mutable_next_validators_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.next_validators_hash)
  return next_validators_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_next_validators_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.next_validators_hash)
  
  return next_validators_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_next_validators_hash(::std::string* next_validators_hash) {
  if (next_validators_hash != NULL) {
    
  } else {
    
  }
  next_validators_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_validators_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.next_validators_hash)
}

// bytes consensus_hash = 12;
void Header::clear_consensus_hash() {
  consensus_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::consensus_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.consensus_hash)
  return consensus_hash_.GetNoArena();
}
void Header::set_consensus_hash(const ::std::string& value) {
  
  consensus_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.consensus_hash)
}
#if LANG_CXX11
void Header::set_consensus_hash(::std::string&& value) {
  
  consensus_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.consensus_hash)
}
#endif
void Header::set_consensus_hash(const char* value) {
  
  consensus_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.consensus_hash)
}
void Header::set_consensus_hash(const void* value, size_t size) {
  
  consensus_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.consensus_hash)
}
::std::string* Header::mutable_consensus_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.consensus_hash)
  return consensus_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_consensus_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.consensus_hash)
  
  return consensus_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_consensus_hash(::std::string* consensus_hash) {
  if (consensus_hash != NULL) {
    
  } else {
    
  }
  consensus_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consensus_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.consensus_hash)
}

// bytes app_hash = 13;
void Header::clear_app_hash() {
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::app_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.app_hash)
  return app_hash_.GetNoArena();
}
void Header::set_app_hash(const ::std::string& value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.app_hash)
}
#if LANG_CXX11
void Header::set_app_hash(::std::string&& value) {
  
  app_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.app_hash)
}
#endif
void Header::set_app_hash(const char* value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.app_hash)
}
void Header::set_app_hash(const void* value, size_t size) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.app_hash)
}
::std::string* Header::mutable_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.app_hash)
  return app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_app_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.app_hash)
  
  return app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_app_hash(::std::string* app_hash) {
  if (app_hash != NULL) {
    
  } else {
    
  }
  app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.app_hash)
}

// bytes last_results_hash = 14;
void Header::clear_last_results_hash() {
  last_results_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::last_results_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.last_results_hash)
  return last_results_hash_.GetNoArena();
}
void Header::set_last_results_hash(const ::std::string& value) {
  
  last_results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.last_results_hash)
}
#if LANG_CXX11
void Header::set_last_results_hash(::std::string&& value) {
  
  last_results_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.last_results_hash)
}
#endif
void Header::set_last_results_hash(const char* value) {
  
  last_results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.last_results_hash)
}
void Header::set_last_results_hash(const void* value, size_t size) {
  
  last_results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.last_results_hash)
}
::std::string* Header::mutable_last_results_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.last_results_hash)
  return last_results_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_last_results_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.last_results_hash)
  
  return last_results_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_last_results_hash(::std::string* last_results_hash) {
  if (last_results_hash != NULL) {
    
  } else {
    
  }
  last_results_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_results_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.last_results_hash)
}

// bytes evidence_hash = 15;
void Header::clear_evidence_hash() {
  evidence_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::evidence_hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.evidence_hash)
  return evidence_hash_.GetNoArena();
}
void Header::set_evidence_hash(const ::std::string& value) {
  
  evidence_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.evidence_hash)
}
#if LANG_CXX11
void Header::set_evidence_hash(::std::string&& value) {
  
  evidence_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.evidence_hash)
}
#endif
void Header::set_evidence_hash(const char* value) {
  
  evidence_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.evidence_hash)
}
void Header::set_evidence_hash(const void* value, size_t size) {
  
  evidence_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.evidence_hash)
}
::std::string* Header::mutable_evidence_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.evidence_hash)
  return evidence_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_evidence_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.evidence_hash)
  
  return evidence_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_evidence_hash(::std::string* evidence_hash) {
  if (evidence_hash != NULL) {
    
  } else {
    
  }
  evidence_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evidence_hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.evidence_hash)
}

// bytes proposer_address = 16;
void Header::clear_proposer_address() {
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::proposer_address() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Header.proposer_address)
  return proposer_address_.GetNoArena();
}
void Header::set_proposer_address(const ::std::string& value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Header.proposer_address)
}
#if LANG_CXX11
void Header::set_proposer_address(::std::string&& value) {
  
  proposer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Header.proposer_address)
}
#endif
void Header::set_proposer_address(const char* value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Header.proposer_address)
}
void Header::set_proposer_address(const void* value, size_t size) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Header.proposer_address)
}
::std::string* Header::mutable_proposer_address() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Header.proposer_address)
  return proposer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_proposer_address() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Header.proposer_address)
  
  return proposer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_proposer_address(::std::string* proposer_address) {
  if (proposer_address != NULL) {
    
  } else {
    
  }
  proposer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_address);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Header.proposer_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kBlockFieldNumber;
const int Version::kAppFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_, &from.block_,
    reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_) + sizeof(app_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Version)
}

void Version::SharedCtor() {
  ::memset(&block_, 0, reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_) + sizeof(app_));
  _cached_size_ = 0;
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Version)
  SharedDtor();
}

void Version::SharedDtor() {
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[36].descriptor;
}

const Version& Version::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Version* Version::New(::google::protobuf::Arena* arena) const {
  Version* n = new Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Version)
  ::memset(&block_, 0, reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_) + sizeof(app_));
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Block = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 App = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Version)
  // uint64 Block = 1;
  if (this->block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->block(), output);
  }

  // uint64 App = 2;
  if (this->app() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->app(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Version)
  // uint64 Block = 1;
  if (this->block() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->block(), target);
  }

  // uint64 App = 2;
  if (this->app() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->app(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Version)
  size_t total_size = 0;

  // uint64 Block = 1;
  if (this->block() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block());
  }

  // uint64 App = 2;
  if (this->app() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->app());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.block() != 0) {
    set_block(from.block());
  }
  if (from.app() != 0) {
    set_app(from.app());
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  std::swap(block_, other->block_);
  std::swap(app_, other->app_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Version

// uint64 Block = 1;
void Version::clear_block() {
  block_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Version::block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Version.Block)
  return block_;
}
void Version::set_block(::google::protobuf::uint64 value) {
  
  block_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Version.Block)
}

// uint64 App = 2;
void Version::clear_app() {
  app_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Version::app() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Version.App)
  return app_;
}
void Version::set_app(::google::protobuf::uint64 value) {
  
  app_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Version.App)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockID::kHashFieldNumber;
const int BlockID::kPartsHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockID::BlockID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts_header()) {
    parts_header_ = new ::suil::tmsp::types::PartSetHeader(*from.parts_header_);
  } else {
    parts_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.BlockID)
}

void BlockID::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parts_header_ = NULL;
  _cached_size_ = 0;
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.BlockID)
  SharedDtor();
}

void BlockID::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete parts_header_;
  }
}

void BlockID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockID::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[37].descriptor;
}

const BlockID& BlockID::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockID* BlockID::New(::google::protobuf::Arena* arena) const {
  BlockID* n = new BlockID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.BlockID)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && parts_header_ != NULL) {
    delete parts_header_;
  }
  parts_header_ = NULL;
}

bool BlockID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.BlockID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.PartSetHeader parts_header = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parts_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.BlockID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.BlockID)
  return false;
#undef DO_
}

void BlockID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.BlockID)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .suil.tmsp.types.PartSetHeader parts_header = 2;
  if (this->has_parts_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parts_header_, output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.BlockID)
}

::google::protobuf::uint8* BlockID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.BlockID)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .suil.tmsp.types.PartSetHeader parts_header = 2;
  if (this->has_parts_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parts_header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.BlockID)
  return target;
}

size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.BlockID)
  size_t total_size = 0;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .suil.tmsp.types.PartSetHeader parts_header = 2;
  if (this->has_parts_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parts_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.BlockID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.BlockID)
    MergeFrom(*source);
  }
}

void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts_header()) {
    mutable_parts_header()->::suil::tmsp::types::PartSetHeader::MergeFrom(from.parts_header());
  }
}

void BlockID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::Swap(BlockID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockID::InternalSwap(BlockID* other) {
  hash_.Swap(&other->hash_);
  std::swap(parts_header_, other->parts_header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockID::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockID

// bytes hash = 1;
void BlockID::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockID::hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.BlockID.hash)
  return hash_.GetNoArena();
}
void BlockID::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.BlockID.hash)
}
#if LANG_CXX11
void BlockID::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.BlockID.hash)
}
#endif
void BlockID::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.BlockID.hash)
}
void BlockID::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.BlockID.hash)
}
::std::string* BlockID::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.BlockID.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockID::release_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.BlockID.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockID::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.BlockID.hash)
}

// .suil.tmsp.types.PartSetHeader parts_header = 2;
bool BlockID::has_parts_header() const {
  return this != internal_default_instance() && parts_header_ != NULL;
}
void BlockID::clear_parts_header() {
  if (GetArenaNoVirtual() == NULL && parts_header_ != NULL) delete parts_header_;
  parts_header_ = NULL;
}
const ::suil::tmsp::types::PartSetHeader& BlockID::parts_header() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.BlockID.parts_header)
  return parts_header_ != NULL ? *parts_header_
                         : *::suil::tmsp::types::PartSetHeader::internal_default_instance();
}
::suil::tmsp::types::PartSetHeader* BlockID::mutable_parts_header() {
  
  if (parts_header_ == NULL) {
    parts_header_ = new ::suil::tmsp::types::PartSetHeader;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.BlockID.parts_header)
  return parts_header_;
}
::suil::tmsp::types::PartSetHeader* BlockID::release_parts_header() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.BlockID.parts_header)
  
  ::suil::tmsp::types::PartSetHeader* temp = parts_header_;
  parts_header_ = NULL;
  return temp;
}
void BlockID::set_allocated_parts_header(::suil::tmsp::types::PartSetHeader* parts_header) {
  delete parts_header_;
  parts_header_ = parts_header;
  if (parts_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.BlockID.parts_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartSetHeader::kTotalFieldNumber;
const int PartSetHeader::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartSetHeader::PartSetHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.PartSetHeader)
}
PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.PartSetHeader)
}

void PartSetHeader::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
  _cached_size_ = 0;
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.PartSetHeader)
  SharedDtor();
}

void PartSetHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartSetHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartSetHeader::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[38].descriptor;
}

const PartSetHeader& PartSetHeader::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartSetHeader* PartSetHeader::New(::google::protobuf::Arena* arena) const {
  PartSetHeader* n = new PartSetHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.PartSetHeader)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
}

bool PartSetHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.PartSetHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.PartSetHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.PartSetHeader)
  return false;
#undef DO_
}

void PartSetHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.PartSetHeader)
  // int32 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.PartSetHeader)
}

::google::protobuf::uint8* PartSetHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.PartSetHeader)
  // int32 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.PartSetHeader)
  return target;
}

size_t PartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.PartSetHeader)
  size_t total_size = 0;

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartSetHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PartSetHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartSetHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.PartSetHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.PartSetHeader)
    MergeFrom(*source);
  }
}

void PartSetHeader::MergeFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void PartSetHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {
  return true;
}

void PartSetHeader::Swap(PartSetHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartSetHeader::InternalSwap(PartSetHeader* other) {
  hash_.Swap(&other->hash_);
  std::swap(total_, other->total_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartSetHeader::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartSetHeader

// int32 total = 1;
void PartSetHeader::clear_total() {
  total_ = 0;
}
::google::protobuf::int32 PartSetHeader::total() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.PartSetHeader.total)
  return total_;
}
void PartSetHeader::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.PartSetHeader.total)
}

// bytes hash = 2;
void PartSetHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PartSetHeader::hash() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.PartSetHeader.hash)
  return hash_.GetNoArena();
}
void PartSetHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.PartSetHeader.hash)
}
#if LANG_CXX11
void PartSetHeader::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.PartSetHeader.hash)
}
#endif
void PartSetHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.PartSetHeader.hash)
}
void PartSetHeader::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.PartSetHeader.hash)
}
::std::string* PartSetHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.PartSetHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PartSetHeader::release_hash() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.PartSetHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PartSetHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.PartSetHeader.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Validator::kAddressFieldNumber;
const int Validator::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Validator::Validator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Validator)
}
Validator::Validator(const Validator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Validator)
}

void Validator::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Validator)
  SharedDtor();
}

void Validator::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Validator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Validator::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[39].descriptor;
}

const Validator& Validator::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Validator* Validator::New(::google::protobuf::Arena* arena) const {
  Validator* n = new Validator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Validator)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
}

bool Validator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Validator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 power = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Validator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Validator)
  return false;
#undef DO_
}

void Validator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Validator)
  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // int64 power = 3;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->power(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Validator)
}

::google::protobuf::uint8* Validator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Validator)
  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // int64 power = 3;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Validator)
  size_t total_size = 0;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // int64 power = 3;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Validator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  const Validator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Validator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Validator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void Validator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::Swap(Validator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Validator::InternalSwap(Validator* other) {
  address_.Swap(&other->address_);
  std::swap(power_, other->power_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Validator::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Validator

// bytes address = 1;
void Validator::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Validator::address() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Validator.address)
  return address_.GetNoArena();
}
void Validator::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Validator.address)
}
#if LANG_CXX11
void Validator::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Validator.address)
}
#endif
void Validator::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Validator.address)
}
void Validator::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Validator.address)
}
::std::string* Validator::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Validator.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Validator::release_address() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Validator.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Validator::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Validator.address)
}

// int64 power = 3;
void Validator::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Validator::power() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Validator.power)
  return power_;
}
void Validator::set_power(::google::protobuf::int64 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Validator.power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidatorUpdate::kPubKeyFieldNumber;
const int ValidatorUpdate::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidatorUpdate::ValidatorUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pub_key()) {
    pub_key_ = new ::suil::tmsp::types::PubKey(*from.pub_key_);
  } else {
    pub_key_ = NULL;
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ValidatorUpdate)
}

void ValidatorUpdate::SharedCtor() {
  ::memset(&pub_key_, 0, reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&pub_key_) + sizeof(power_));
  _cached_size_ = 0;
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ValidatorUpdate)
  SharedDtor();
}

void ValidatorUpdate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pub_key_;
  }
}

void ValidatorUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidatorUpdate::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[40].descriptor;
}

const ValidatorUpdate& ValidatorUpdate::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValidatorUpdate* ValidatorUpdate::New(::google::protobuf::Arena* arena) const {
  ValidatorUpdate* n = new ValidatorUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ValidatorUpdate)
  if (GetArenaNoVirtual() == NULL && pub_key_ != NULL) {
    delete pub_key_;
  }
  pub_key_ = NULL;
  power_ = GOOGLE_LONGLONG(0);
}

bool ValidatorUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ValidatorUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.PubKey pub_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 power = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ValidatorUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ValidatorUpdate)
  return false;
#undef DO_
}

void ValidatorUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ValidatorUpdate)
  // .suil.tmsp.types.PubKey pub_key = 1;
  if (this->has_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pub_key_, output);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->power(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ValidatorUpdate)
}

::google::protobuf::uint8* ValidatorUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.ValidatorUpdate)
  // .suil.tmsp.types.PubKey pub_key = 1;
  if (this->has_pub_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pub_key_, false, target);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ValidatorUpdate)
  size_t total_size = 0;

  // .suil.tmsp.types.PubKey pub_key = 1;
  if (this->has_pub_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pub_key_);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidatorUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidatorUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.ValidatorUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.ValidatorUpdate)
    MergeFrom(*source);
  }
}

void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pub_key()) {
    mutable_pub_key()->::suil::tmsp::types::PubKey::MergeFrom(from.pub_key());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void ValidatorUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::Swap(ValidatorUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  std::swap(pub_key_, other->pub_key_);
  std::swap(power_, other->power_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidatorUpdate::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidatorUpdate

// .suil.tmsp.types.PubKey pub_key = 1;
bool ValidatorUpdate::has_pub_key() const {
  return this != internal_default_instance() && pub_key_ != NULL;
}
void ValidatorUpdate::clear_pub_key() {
  if (GetArenaNoVirtual() == NULL && pub_key_ != NULL) delete pub_key_;
  pub_key_ = NULL;
}
const ::suil::tmsp::types::PubKey& ValidatorUpdate::pub_key() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ValidatorUpdate.pub_key)
  return pub_key_ != NULL ? *pub_key_
                         : *::suil::tmsp::types::PubKey::internal_default_instance();
}
::suil::tmsp::types::PubKey* ValidatorUpdate::mutable_pub_key() {
  
  if (pub_key_ == NULL) {
    pub_key_ = new ::suil::tmsp::types::PubKey;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.ValidatorUpdate.pub_key)
  return pub_key_;
}
::suil::tmsp::types::PubKey* ValidatorUpdate::release_pub_key() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.ValidatorUpdate.pub_key)
  
  ::suil::tmsp::types::PubKey* temp = pub_key_;
  pub_key_ = NULL;
  return temp;
}
void ValidatorUpdate::set_allocated_pub_key(::suil::tmsp::types::PubKey* pub_key) {
  delete pub_key_;
  pub_key_ = pub_key;
  if (pub_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.ValidatorUpdate.pub_key)
}

// int64 power = 2;
void ValidatorUpdate::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ValidatorUpdate::power() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.ValidatorUpdate.power)
  return power_;
}
void ValidatorUpdate::set_power(::google::protobuf::int64 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.ValidatorUpdate.power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteInfo::kValidatorFieldNumber;
const int VoteInfo::kSignedLastBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteInfo::VoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::Validator(*from.validator_);
  } else {
    validator_ = NULL;
  }
  signed_last_block_ = from.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.VoteInfo)
}

void VoteInfo::SharedCtor() {
  ::memset(&validator_, 0, reinterpret_cast<char*>(&signed_last_block_) -
    reinterpret_cast<char*>(&validator_) + sizeof(signed_last_block_));
  _cached_size_ = 0;
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.VoteInfo)
  SharedDtor();
}

void VoteInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete validator_;
  }
}

void VoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteInfo::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[41].descriptor;
}

const VoteInfo& VoteInfo::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoteInfo* VoteInfo::New(::google::protobuf::Arena* arena) const {
  VoteInfo* n = new VoteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.VoteInfo)
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) {
    delete validator_;
  }
  validator_ = NULL;
  signed_last_block_ = false;
}

bool VoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.VoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Validator validator = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool signed_last_block = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed_last_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.VoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.VoteInfo)
  return false;
#undef DO_
}

void VoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.VoteInfo)
  // .suil.tmsp.types.Validator validator = 1;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->validator_, output);
  }

  // bool signed_last_block = 2;
  if (this->signed_last_block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->signed_last_block(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.VoteInfo)
}

::google::protobuf::uint8* VoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.VoteInfo)
  // .suil.tmsp.types.Validator validator = 1;
  if (this->has_validator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->validator_, false, target);
  }

  // bool signed_last_block = 2;
  if (this->signed_last_block() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->signed_last_block(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.VoteInfo)
  size_t total_size = 0;

  // .suil.tmsp.types.Validator validator = 1;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validator_);
  }

  // bool signed_last_block = 2;
  if (this->signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.VoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.VoteInfo)
    MergeFrom(*source);
  }
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::Validator::MergeFrom(from.validator());
  }
  if (from.signed_last_block() != 0) {
    set_signed_last_block(from.signed_last_block());
  }
}

void VoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::Swap(VoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteInfo::InternalSwap(VoteInfo* other) {
  std::swap(validator_, other->validator_);
  std::swap(signed_last_block_, other->signed_last_block_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteInfo::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteInfo

// .suil.tmsp.types.Validator validator = 1;
bool VoteInfo::has_validator() const {
  return this != internal_default_instance() && validator_ != NULL;
}
void VoteInfo::clear_validator() {
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) delete validator_;
  validator_ = NULL;
}
const ::suil::tmsp::types::Validator& VoteInfo::validator() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.VoteInfo.validator)
  return validator_ != NULL ? *validator_
                         : *::suil::tmsp::types::Validator::internal_default_instance();
}
::suil::tmsp::types::Validator* VoteInfo::mutable_validator() {
  
  if (validator_ == NULL) {
    validator_ = new ::suil::tmsp::types::Validator;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.VoteInfo.validator)
  return validator_;
}
::suil::tmsp::types::Validator* VoteInfo::release_validator() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.VoteInfo.validator)
  
  ::suil::tmsp::types::Validator* temp = validator_;
  validator_ = NULL;
  return temp;
}
void VoteInfo::set_allocated_validator(::suil::tmsp::types::Validator* validator) {
  delete validator_;
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.VoteInfo.validator)
}

// bool signed_last_block = 2;
void VoteInfo::clear_signed_last_block() {
  signed_last_block_ = false;
}
bool VoteInfo::signed_last_block() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.VoteInfo.signed_last_block)
  return signed_last_block_;
}
void VoteInfo::set_signed_last_block(bool value) {
  
  signed_last_block_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.VoteInfo.signed_last_block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubKey::kTypeFieldNumber;
const int PubKey::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubKey::PubKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.PubKey)
}
PubKey::PubKey(const PubKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.PubKey)
}

void PubKey::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PubKey::~PubKey() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.PubKey)
  SharedDtor();
}

void PubKey::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PubKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubKey::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[42].descriptor;
}

const PubKey& PubKey::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

PubKey* PubKey::New(::google::protobuf::Arena* arena) const {
  PubKey* n = new PubKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.PubKey)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PubKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.PubKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.PubKey.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.PubKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.PubKey)
  return false;
#undef DO_
}

void PubKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.PubKey)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.PubKey.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.PubKey)
}

::google::protobuf::uint8* PubKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.PubKey)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.PubKey.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.PubKey)
  return target;
}

size_t PubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.PubKey)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PubKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PubKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.PubKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.PubKey)
    MergeFrom(*source);
  }
}

void PubKey::MergeFrom(const PubKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void PubKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubKey::CopyFrom(const PubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKey::IsInitialized() const {
  return true;
}

void PubKey::Swap(PubKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PubKey::InternalSwap(PubKey* other) {
  type_.Swap(&other->type_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PubKey::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PubKey

// string type = 1;
void PubKey::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PubKey::type() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.PubKey.type)
  return type_.GetNoArena();
}
void PubKey::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.PubKey.type)
}
#if LANG_CXX11
void PubKey::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.PubKey.type)
}
#endif
void PubKey::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.PubKey.type)
}
void PubKey::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.PubKey.type)
}
::std::string* PubKey::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.PubKey.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PubKey::release_type() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.PubKey.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PubKey::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.PubKey.type)
}

// bytes data = 2;
void PubKey::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PubKey::data() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.PubKey.data)
  return data_.GetNoArena();
}
void PubKey::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.PubKey.data)
}
#if LANG_CXX11
void PubKey::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.PubKey.data)
}
#endif
void PubKey::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.PubKey.data)
}
void PubKey::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.PubKey.data)
}
::std::string* PubKey::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.PubKey.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PubKey::release_data() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.PubKey.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PubKey::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.PubKey.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Evidence::kTypeFieldNumber;
const int Evidence::kValidatorFieldNumber;
const int Evidence::kHeightFieldNumber;
const int Evidence::kTimeFieldNumber;
const int Evidence::kTotalVotingPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Evidence::Evidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::Validator(*from.validator_);
  } else {
    validator_ = NULL;
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&total_voting_power_) -
    reinterpret_cast<char*>(&height_) + sizeof(total_voting_power_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Evidence)
}

void Evidence::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validator_, 0, reinterpret_cast<char*>(&total_voting_power_) -
    reinterpret_cast<char*>(&validator_) + sizeof(total_voting_power_));
  _cached_size_ = 0;
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Evidence)
  SharedDtor();
}

void Evidence::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete validator_;
  }
  if (this != internal_default_instance()) {
    delete time_;
  }
}

void Evidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Evidence::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[43].descriptor;
}

const Evidence& Evidence::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Evidence* Evidence::New(::google::protobuf::Arena* arena) const {
  Evidence* n = new Evidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Evidence)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) {
    delete validator_;
  }
  validator_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  ::memset(&height_, 0, reinterpret_cast<char*>(&total_voting_power_) -
    reinterpret_cast<char*>(&height_) + sizeof(total_voting_power_));
}

bool Evidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Evidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.Evidence.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Validator validator = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_voting_power = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_voting_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Evidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Evidence)
  return false;
#undef DO_
}

void Evidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Evidence)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Evidence.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // .suil.tmsp.types.Validator validator = 2;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->validator_, output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->time_, output);
  }

  // int64 total_voting_power = 5;
  if (this->total_voting_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_voting_power(), output);
  }

  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Evidence)
}

::google::protobuf::uint8* Evidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:suil.tmsp.types.Evidence)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Evidence.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // .suil.tmsp.types.Validator validator = 2;
  if (this->has_validator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->validator_, false, target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->height(), target);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->time_, false, target);
  }

  // int64 total_voting_power = 5;
  if (this->total_voting_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_voting_power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:suil.tmsp.types.Evidence)
  return target;
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Evidence)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .suil.tmsp.types.Validator validator = 2;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validator_);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 total_voting_power = 5;
  if (this->total_voting_power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_voting_power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Evidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:suil.tmsp.types.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Evidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Evidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:suil.tmsp.types.Evidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:suil.tmsp.types.Evidence)
    MergeFrom(*source);
  }
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::Validator::MergeFrom(from.validator());
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.total_voting_power() != 0) {
    set_total_voting_power(from.total_voting_power());
  }
}

void Evidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:suil.tmsp.types.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::Swap(Evidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Evidence::InternalSwap(Evidence* other) {
  type_.Swap(&other->type_);
  std::swap(validator_, other->validator_);
  std::swap(time_, other->time_);
  std::swap(height_, other->height_);
  std::swap(total_voting_power_, other->total_voting_power_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Evidence::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Evidence

// string type = 1;
void Evidence::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Evidence::type() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Evidence.type)
  return type_.GetNoArena();
}
void Evidence::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Evidence.type)
}
#if LANG_CXX11
void Evidence::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suil.tmsp.types.Evidence.type)
}
#endif
void Evidence::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suil.tmsp.types.Evidence.type)
}
void Evidence::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suil.tmsp.types.Evidence.type)
}
::std::string* Evidence::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Evidence.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Evidence::release_type() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Evidence.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Evidence::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Evidence.type)
}

// .suil.tmsp.types.Validator validator = 2;
bool Evidence::has_validator() const {
  return this != internal_default_instance() && validator_ != NULL;
}
void Evidence::clear_validator() {
  if (GetArenaNoVirtual() == NULL && validator_ != NULL) delete validator_;
  validator_ = NULL;
}
const ::suil::tmsp::types::Validator& Evidence::validator() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Evidence.validator)
  return validator_ != NULL ? *validator_
                         : *::suil::tmsp::types::Validator::internal_default_instance();
}
::suil::tmsp::types::Validator* Evidence::mutable_validator() {
  
  if (validator_ == NULL) {
    validator_ = new ::suil::tmsp::types::Validator;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Evidence.validator)
  return validator_;
}
::suil::tmsp::types::Validator* Evidence::release_validator() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Evidence.validator)
  
  ::suil::tmsp::types::Validator* temp = validator_;
  validator_ = NULL;
  return temp;
}
void Evidence::set_allocated_validator(::suil::tmsp::types::Validator* validator) {
  delete validator_;
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Evidence.validator)
}

// int64 height = 3;
void Evidence::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Evidence::height() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Evidence.height)
  return height_;
}
void Evidence::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Evidence.height)
}

// .suil.tmsp.types.Timestamp time = 4;
bool Evidence::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
void Evidence::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::suil::tmsp::types::Timestamp& Evidence::time() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Evidence.time)
  return time_ != NULL ? *time_
                         : *::suil::tmsp::types::Timestamp::internal_default_instance();
}
::suil::tmsp::types::Timestamp* Evidence::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::suil::tmsp::types::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:suil.tmsp.types.Evidence.time)
  return time_;
}
::suil::tmsp::types::Timestamp* Evidence::release_time() {
  // @@protoc_insertion_point(field_release:suil.tmsp.types.Evidence.time)
  
  ::suil::tmsp::types::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void Evidence::set_allocated_time(::suil::tmsp::types::Timestamp* time) {
  delete time_;
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Evidence.time)
}

// int64 total_voting_power = 5;
void Evidence::clear_total_voting_power() {
  total_voting_power_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Evidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:suil.tmsp.types.Evidence.total_voting_power)
  return total_voting_power_;
}
void Evidence::set_total_voting_power(::google::protobuf::int64 value) {
  
  total_voting_power_ = value;
  // @@protoc_insertion_point(field_set:suil.tmsp.types.Evidence.total_voting_power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace tmsp
}  // namespace suil

// @@protoc_insertion_point(global_scope)
